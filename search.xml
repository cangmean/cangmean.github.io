<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>堆和优先队列</title>
      <link href="/2018/11/02/ds-heap/"/>
      <url>/2018/11/02/ds-heap/</url>
      <content type="html"><![CDATA[<p>堆是在节点上存储数据的完全二叉树， 小顶堆是把对中最小值一直保持在堆顶的树型结构。其中主要通过替换父子节点来实现</p><ul><li>向上筛选： 将新的值插入到堆尾，并通过与父节点(循环)比较来对换位置。</li><li>向下筛选： 将堆尾放入到已弹出的堆顶部，通过与子节点(循环)比较来对换位置。</li></ul><p><img src="https://mink.oss-cn-beijing.aliyuncs.com/blog/heap.png" alt="小顶堆实现过程"></p><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PriorityQue</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(heap = []) &#123;</span><br><span class="line">    <span class="keyword">this</span>.heap = heap</span><br><span class="line">    <span class="keyword">this</span>.build()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getSize() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.heap.length</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  upward(i) &#123;</span><br><span class="line">    <span class="comment">// 向上筛选</span></span><br><span class="line">    <span class="comment">// i 是数组下标, 符合条件替换父子节点</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">this</span>._parent(i) &gt;= <span class="number">0</span> &amp;&amp; i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.heap[<span class="keyword">this</span>._parent(i)] &gt; <span class="keyword">this</span>.heap[i]) &#123;</span><br><span class="line">        <span class="keyword">let</span> tmp = <span class="keyword">this</span>.heap[i]</span><br><span class="line">        <span class="keyword">this</span>.heap[i] = <span class="keyword">this</span>.heap[<span class="keyword">this</span>._parent(i)]</span><br><span class="line">        <span class="keyword">this</span>.heap[<span class="keyword">this</span>._parent(i)] = tmp</span><br><span class="line">      &#125;</span><br><span class="line">      i = <span class="keyword">this</span>._parent(i)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  downward(i) &#123;</span><br><span class="line">    <span class="comment">// 向下筛选， 获取子节点中最小值，替换父节点</span></span><br><span class="line">    <span class="keyword">while</span> (i * <span class="number">2</span> &lt;= <span class="keyword">this</span>.getSize()) &#123;</span><br><span class="line">      <span class="keyword">let</span> idx = <span class="keyword">this</span>.minChild(i)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.heap[i] &gt; <span class="keyword">this</span>.heap[idx]) &#123;</span><br><span class="line">        <span class="keyword">let</span> tmp = <span class="keyword">this</span>.heap[idx]</span><br><span class="line">        <span class="keyword">this</span>.heap[idx] = <span class="keyword">this</span>.heap[i]</span><br><span class="line">        <span class="keyword">this</span>.heap[i] = tmp</span><br><span class="line">      &#125;</span><br><span class="line">      i = idx &gt; <span class="number">0</span> ? idx : <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  minChild(i) &#123;</span><br><span class="line">    <span class="comment">// 如果没有右子节点， 返回左子节点</span></span><br><span class="line">    <span class="keyword">let</span> left_idx = i * <span class="number">2</span></span><br><span class="line">    <span class="keyword">let</span> right_idx = i * <span class="number">2</span> + <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> (right_idx &gt; <span class="keyword">this</span>.getSize()) &#123;</span><br><span class="line">      <span class="keyword">return</span> left_idx</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.heap[left_idx] &lt; <span class="keyword">this</span>.heap[right_idx]) &#123;</span><br><span class="line">      <span class="keyword">return</span> left_idx</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> right_idx</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  _parent(i) &#123;</span><br><span class="line">    <span class="comment">// 父节点下标</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.floor(i / <span class="number">2</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  enqueue(e) &#123;</span><br><span class="line">    <span class="comment">// 压入堆中</span></span><br><span class="line">    <span class="keyword">this</span>.heap.push(e)</span><br><span class="line">    <span class="keyword">this</span>.upward(<span class="keyword">this</span>.getSize())</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  dequeue() &#123;</span><br><span class="line">    <span class="comment">// 弹出堆顶</span></span><br><span class="line">    <span class="keyword">let</span> e = <span class="keyword">this</span>.heap[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">this</span>.heap[<span class="number">0</span>] = <span class="keyword">this</span>.heap[<span class="keyword">this</span>.getSize() - <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">this</span>.heap.pop()</span><br><span class="line">    <span class="keyword">this</span>.downward(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> e</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  build() &#123;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="keyword">this</span>.getSize()</span><br><span class="line">    <span class="keyword">while</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.upward(i)</span><br><span class="line">      i -= <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> q = <span class="keyword">new</span> PriorityQue([<span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>])</span><br><span class="line"><span class="built_in">console</span>.log(q)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  q.dequeue()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 堆 </tag>
            
            <tag> 小顶堆 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>表达式树</title>
      <link href="/2018/11/01/ds-exp-tree/"/>
      <url>/2018/11/01/ds-exp-tree/</url>
      <content type="html"><![CDATA[<p>将树的节点和叶子节点分别当做操作符和操作数，用来描述表达式的方式叫表达式树。比如: <code>(1 + 2) \* (5 - 3)</code> 的表达式树</p><p><img src="https://mink.oss-cn-beijing.aliyuncs.com/blog/exp_tree.jpg" alt="表达式树"></p><p>下面是表达式树的代码， 首先通过栈来存储操作符和操作数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.list = []</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getSize() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.list.length</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  isEmpty() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.getSize() === <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  push(e) &#123;</span><br><span class="line">    <span class="keyword">this</span>.list.push(e)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  pop() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.list.pop()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  top() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.getSize() === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.list[<span class="keyword">this</span>.getSize() - <span class="number">1</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>并设置符号的优先级，跟栈的括号匹配是同等原理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 优先级</span></span><br><span class="line"><span class="keyword">const</span> priority = &#123;</span><br><span class="line">  <span class="string">'('</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="string">'+'</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="string">'-'</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="string">'*'</span>: <span class="number">3</span>,</span><br><span class="line">  <span class="string">'/'</span>: <span class="number">3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下是设置节点的部分， 节点可以计算该节点的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(data = null, left = null, right = null) &#123;</span><br><span class="line">    <span class="keyword">this</span>.data = data</span><br><span class="line">    <span class="keyword">this</span>.left = left</span><br><span class="line">    <span class="keyword">this</span>.right = right</span><br><span class="line">    <span class="keyword">this</span>.value = <span class="keyword">this</span>.get_value()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  get_value() &#123;</span><br><span class="line">    <span class="comment">// 获取该节点的值</span></span><br><span class="line">    <span class="keyword">let</span> left_value = <span class="keyword">this</span>.left</span><br><span class="line">    <span class="keyword">let</span> right_value = <span class="keyword">this</span>.right</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.left <span class="keyword">instanceof</span> Node) &#123;</span><br><span class="line">      left_value = <span class="keyword">this</span>.left.value</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.right <span class="keyword">instanceof</span> Node) &#123;</span><br><span class="line">      right_value = <span class="keyword">this</span>.right.value</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (left_value &amp;&amp; right_value) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.eval(left_value, right_value)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (left_value) &#123;</span><br><span class="line">      <span class="keyword">return</span> left_value</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (right_value) &#123;</span><br><span class="line">      <span class="keyword">return</span> right_value</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">eval</span>(left, right) &#123;</span><br><span class="line">    <span class="comment">// 计算节点值</span></span><br><span class="line">    <span class="keyword">switch</span> (<span class="keyword">this</span>.data) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'+'</span>:</span><br><span class="line">        <span class="keyword">return</span> left + right</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'-'</span>:</span><br><span class="line">        <span class="keyword">return</span> left - right</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'*'</span>:</span><br><span class="line">        <span class="keyword">return</span> left * right</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'/'</span>:</span><br><span class="line">        <span class="keyword">return</span> left / right</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">throw</span> <span class="string">'Error Operator: '</span> + <span class="keyword">this</span>.data</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对字符串进行解析，并构建表达式树。这里通过设置栈来临时存储<code>操作符</code>和<code>操作数</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExpTree</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(exp) &#123;</span><br><span class="line">    <span class="keyword">this</span>.exp = exp</span><br><span class="line">    <span class="keyword">this</span>.op_stack = <span class="keyword">new</span> Stack()</span><br><span class="line">    <span class="keyword">this</span>.data_stack = <span class="keyword">new</span> Stack()</span><br><span class="line">    <span class="keyword">this</span>.op = <span class="string">'+-*/()'</span></span><br><span class="line">    <span class="keyword">this</span>.root = <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 解析表达式</span></span><br><span class="line"><span class="comment">   * @param &#123;String&#125; exp 表达式</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  parse_exp() &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> <span class="keyword">this</span>.exp) &#123;</span><br><span class="line">      <span class="keyword">if</span> (i.trim() === <span class="string">''</span>) &#123;</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.op.includes(i)) &#123;</span><br><span class="line">          <span class="comment">// 数值压入数据栈中</span></span><br><span class="line">          <span class="keyword">this</span>.data_stack.push(<span class="built_in">parseInt</span>(i))</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.op_stack.top() === <span class="literal">null</span> || i === <span class="string">'('</span>) &#123;</span><br><span class="line">          <span class="comment">// 栈顶为空或者是开括号</span></span><br><span class="line">          <span class="keyword">this</span>.op_stack.push(i)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i === <span class="string">')'</span>) &#123;</span><br><span class="line">          <span class="comment">// 符号为闭括号, 循环弹出符号并添加到节点</span></span><br><span class="line">          <span class="keyword">let</span> top = <span class="keyword">this</span>.op_stack.pop()</span><br><span class="line">          <span class="keyword">while</span> (top != <span class="string">'('</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.setNode(top)</span><br><span class="line">            top = <span class="keyword">this</span>.op_stack.pop()</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (priority[<span class="keyword">this</span>.op_stack.top()] &gt;= priority[i]) &#123;</span><br><span class="line">          <span class="comment">// 判断优先级，添加到节点</span></span><br><span class="line">          <span class="keyword">let</span> top = <span class="keyword">this</span>.op_stack.pop()</span><br><span class="line">          <span class="keyword">this</span>.setNode(top)</span><br><span class="line">          <span class="keyword">this</span>.op_stack.push(i)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">this</span>.op_stack.push(i)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成表达式树</span></span><br><span class="line">    <span class="keyword">let</span> top = <span class="keyword">this</span>.op_stack.pop()</span><br><span class="line">    <span class="keyword">while</span> (top) &#123;</span><br><span class="line">      <span class="keyword">this</span>.setNode(top)</span><br><span class="line">      top = <span class="keyword">this</span>.op_stack.pop()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.root = <span class="keyword">this</span>.data_stack.pop()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setNode(op) &#123;</span><br><span class="line">    <span class="comment">// 表达式转换成节点</span></span><br><span class="line">    <span class="keyword">let</span> right = <span class="keyword">this</span>.data_stack.pop()</span><br><span class="line">    <span class="keyword">let</span> left = <span class="keyword">this</span>.data_stack.pop()</span><br><span class="line">    <span class="keyword">let</span> node = <span class="keyword">new</span> Node(op, left, right)</span><br><span class="line">    <span class="keyword">this</span>.data_stack.push(node)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> et = <span class="keyword">new</span> ExpTree(<span class="string">'(1 + 2) * (5 - 3)'</span>)</span><br><span class="line">et.parse_exp()</span><br><span class="line"><span class="built_in">console</span>.log(et.root)</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 表达式树 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>mysql 解决emoji插入问题</title>
      <link href="/2018/10/17/mysql-encode/"/>
      <url>/2018/10/17/mysql-encode/</url>
      <content type="html"><![CDATA[<h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>一般设置 mysql 字符时都会使用 utf8 字符编码，但是最近文本中插入 emoji 表情的时候遇到了麻烦，只要文本中有 emoji 表情存入数据库的时候就会报错。</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>emoji 使用 4 个字节，utf8 一个字符最多三个字节，如果想使用 emoji 表情的话就得使用 utf8mb4 字符编码(扩展到一个字符 4 个字节)。</p><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>首先查看表字段的字符集</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show full columns from article;</span><br></pre></td></tr></table></figure><p>显示内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">+-------------+--------------+-----------------+------+-----+---------+-------+---------------------------------+---------+</span><br><span class="line">| Field       | Type         | Collation       | Null | Key | Default | Extra | Privileges                      | Comment |</span><br><span class="line">+-------------+--------------+-----------------+------+-----+---------+-------+---------------------------------+---------+</span><br><span class="line">| id          | varchar(16)  | utf8_general_ci | NO   | PRI | NULL    |       | select,insert,update,references |         |</span><br><span class="line">| title       | varchar(255) | utf8_general_ci | NO   |     | NULL    |       | select,insert,update,references |         |</span><br><span class="line">| content     | text         | utf8_general_ci | NO   |     | NULL    |       | select,insert,update,references |         |</span><br><span class="line">| status      | int(11)      | NULL            | YES  |     | NULL    |       | select,insert,update,references |         |</span><br><span class="line">| create_time | datetime     | NULL            | YES  |     | NULL    |       | select,insert,update,references |         |</span><br><span class="line">| update_time | datetime     | NULL            | YES  |     | NULL    |       | select,insert,update,references |         |</span><br><span class="line">| category_id | varchar(16)  | utf8_general_ci | NO   |     | NULL    |       | select,insert,update,references |         |</span><br><span class="line">| seo_id      | varchar(16)  | utf8_general_ci | YES  |     | NULL    |       | select,insert,update,references |         |</span><br><span class="line">| count       | int(11)      | NULL            | YES  |     | NULL    |       | select,insert,update,references |         |</span><br><span class="line">+-------------+--------------+-----------------+------+-----+---------+-------+---------------------------------+---------+</span><br></pre></td></tr></table></figure><a id="more"></a><p>这里可以看到 content 的字符编码是 utf8 格式的，修改为 utf8mb4 格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table article change content content text character set utf8mb4 collate utf8mb4_general_ci;</span><br></pre></td></tr></table></figure><p>显示内容中 cotnent 格式边成了 utf8mb4</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">+-------------+--------------+--------------------+------+-----+---------+-------+---------------------------------+---------+</span><br><span class="line">| Field       | Type         | Collation          | Null | Key | Default | Extra | Privileges                      | Comment |</span><br><span class="line">+-------------+--------------+--------------------+------+-----+---------+-------+---------------------------------+---------+</span><br><span class="line">| id          | varchar(16)  | utf8_general_ci    | NO   | PRI | NULL    |       | select,insert,update,references |         |</span><br><span class="line">| title       | varchar(255) | utf8_general_ci    | NO   |     | NULL    |       | select,insert,update,references |         |</span><br><span class="line">| content     | text         | utf8mb4_general_ci | YES  |     | NULL    |       | select,insert,update,references |         |</span><br><span class="line">| status      | int(11)      | NULL               | YES  |     | NULL    |       | select,insert,update,references |         |</span><br><span class="line">| create_time | datetime     | NULL               | YES  |     | NULL    |       | select,insert,update,references |         |</span><br><span class="line">| update_time | datetime     | NULL               | YES  |     | NULL    |       | select,insert,update,references |         |</span><br><span class="line">| category_id | varchar(16)  | utf8_general_ci    | NO   |     | NULL    |       | select,insert,update,references |         |</span><br><span class="line">| seo_id      | varchar(16)  | utf8_general_ci    | YES  |     | NULL    |       | select,insert,update,references |         |</span><br><span class="line">| count       | int(11)      | NULL               | YES  |     | NULL    |       | select,insert,update,references |         |</span><br><span class="line">+-------------+--------------+--------------------+------+-----+---------+-------+---------------------------------+---------+</span><br></pre></td></tr></table></figure><p>也可以直接修改表的编码格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table article convert to character set utf8mb4 collate utf8mb4_general_ci;</span><br></pre></td></tr></table></figure><p>显示内容中批量修改了字符编码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">+-------------+--------------+--------------------+------+-----+---------+-------+---------------------------------+---------+</span><br><span class="line">| Field       | Type         | Collation          | Null | Key | Default | Extra | Privileges                      | Comment |</span><br><span class="line">+-------------+--------------+--------------------+------+-----+---------+-------+---------------------------------+---------+</span><br><span class="line">| id          | varchar(16)  | utf8mb4_general_ci | NO   | PRI | NULL    |       | select,insert,update,references |         |</span><br><span class="line">| title       | varchar(255) | utf8mb4_general_ci | NO   |     | NULL    |       | select,insert,update,references |         |</span><br><span class="line">| content     | text         | utf8mb4_general_ci | YES  |     | NULL    |       | select,insert,update,references |         |</span><br><span class="line">| status      | int(11)      | NULL               | YES  |     | NULL    |       | select,insert,update,references |         |</span><br><span class="line">| create_time | datetime     | NULL               | YES  |     | NULL    |       | select,insert,update,references |         |</span><br><span class="line">| update_time | datetime     | NULL               | YES  |     | NULL    |       | select,insert,update,references |         |</span><br><span class="line">| category_id | varchar(16)  | utf8mb4_general_ci | NO   |     | NULL    |       | select,insert,update,references |         |</span><br><span class="line">| seo_id      | varchar(16)  | utf8mb4_general_ci | YES  |     | NULL    |       | select,insert,update,references |         |</span><br><span class="line">| count       | int(11)      | NULL               | YES  |     | NULL    |       | select,insert,update,references |         |</span><br><span class="line">+-------------+--------------+--------------------+------+-----+---------+-------+---------------------------------+---------+</span><br></pre></td></tr></table></figure><p>也可以通过命令查看数据库和表设置的字符编码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">show create database `db_name`;</span><br><span class="line"></span><br><span class="line">show create table article;</span><br></pre></td></tr></table></figure><p>修改数据库的默认字符集</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter database `db_name` character set = utf8mb4 collate = utf8mb4_general_ci;</span><br></pre></td></tr></table></figure><p>最后修改 mysql 的配置文件 <code>my.cnf</code>, 并重启 mysql</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[client]</span><br><span class="line">default-character-set=utf8mb4</span><br><span class="line"></span><br><span class="line">[client]</span><br><span class="line">default-character-set=utf8mb4</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">character-set-client-handshake=false</span><br><span class="line">character-set-server=utf8mb4</span><br><span class="line">collation-server=utf8mb4_general_ci</span><br></pre></td></tr></table></figure><p>检查修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW VARIABLES WHERE Variable_name LIKE &apos;character\_set\_%&apos; OR Variable_name LIKE &apos;collation%&apos;;</span><br></pre></td></tr></table></figure><p>如果修改后的内容显示使用了 utf8mb4，就可以使用 emoji 表情了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">+--------------------------+--------------------+</span><br><span class="line">| Variable_name            | Value              |</span><br><span class="line">+--------------------------+--------------------+</span><br><span class="line">| character_set_client     | utf8mb4            |</span><br><span class="line">| character_set_connection | utf8mb4            |</span><br><span class="line">| character_set_database   | utf8mb4            |</span><br><span class="line">| character_set_filesystem | binary             |</span><br><span class="line">| character_set_results    | utf8mb4            |</span><br><span class="line">| character_set_server     | utf8mb4            |</span><br><span class="line">| character_set_system     | utf8               |</span><br><span class="line">| collation_connection     | utf8mb4_general_ci |</span><br><span class="line">| collation_database       | utf8mb4_general_ci |</span><br><span class="line">| collation_server         | utf8mb4_general_ci |</span><br><span class="line">+--------------------------+--------------------+</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>迷宫探索</title>
      <link href="/2018/09/20/ds-maze-quest/"/>
      <url>/2018/09/20/ds-maze-quest/</url>
      <content type="html"><![CDATA[<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>利用递归来检测当前 postion 是否是迷宫的出口。mark 用来标记已走过的路，如果当前位置已走过就不在查找， passable 检测 postion 是否可通行，以下是位移的代码部分</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 循环探索四个方向</span></span><br><span class="line"><span class="keyword">this</span>.dirs.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> pos = [start[<span class="number">0</span>] + item[<span class="number">0</span>], start[<span class="number">1</span>] + item[<span class="number">1</span>]]</span><br><span class="line">  <span class="comment">// 判断通行</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.passable(pos)) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`移动位置: <span class="subst">$&#123;pos&#125;</span>`</span>)</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.run(pos, end)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="循环探索"><a href="#循环探索" class="headerlink" title="循环探索"></a>循环探索</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MazeQuest</span> </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * @param &#123;Array&#125; maze 迷宫地图</span></span><br><span class="line"><span class="comment">   * @param &#123;Position&#125; start 开始</span></span><br><span class="line"><span class="comment">   * @param &#123;Position&#125; end 结束</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">constructor</span>(maze, start, end) &#123;</span><br><span class="line">    <span class="keyword">this</span>.maze = maze</span><br><span class="line">    <span class="keyword">this</span>.start = start</span><br><span class="line">    <span class="keyword">this</span>.end = end</span><br><span class="line">    <span class="keyword">this</span>.dirs = [</span><br><span class="line">      [<span class="number">0</span>, <span class="number">1</span>], <span class="comment">// 向东</span></span><br><span class="line">      [<span class="number">0</span>, <span class="number">-1</span>], <span class="comment">// 向西</span></span><br><span class="line">      [<span class="number">-1</span>, <span class="number">0</span>], <span class="comment">// 向北</span></span><br><span class="line">      [<span class="number">1</span>, <span class="number">0</span>] <span class="comment">// 向南</span></span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">this</span>.run(start, end)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 标记</span></span><br><span class="line"><span class="comment">   * @param &#123;Position&#125; pos 标记坐标 0: 可通行， 1: 不可通行，2: 已通行</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  mark(pos) &#123;</span><br><span class="line">    <span class="keyword">this</span>.maze[pos[<span class="number">0</span>]][pos[<span class="number">1</span>]] = <span class="number">2</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判断是否相同</span></span><br><span class="line">  isEqual(pos1, pos2) &#123;</span><br><span class="line">    <span class="keyword">if</span> (pos1[<span class="number">0</span>] === pos2[<span class="number">0</span>] &amp;&amp; pos1[<span class="number">1</span>] === pos2[<span class="number">1</span>]) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判断能否通行</span></span><br><span class="line">  passable(pos) &#123;</span><br><span class="line">    <span class="keyword">if</span> (pos[<span class="number">0</span>] &lt; <span class="number">0</span> || pos[<span class="number">1</span>] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (</span><br><span class="line">      <span class="keyword">this</span>.maze.length &lt;= pos[<span class="number">0</span>] ||</span><br><span class="line">      <span class="keyword">this</span>.maze[pos[<span class="number">0</span>]].length &lt;= pos[<span class="number">1</span>]</span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.maze[pos[<span class="number">0</span>]][pos[<span class="number">1</span>]] == <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 开始探索</span></span><br><span class="line">  run(start, end) &#123;</span><br><span class="line">    <span class="keyword">this</span>.mark(start)</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.isEqual(start, end)) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`找到出口: <span class="subst">$&#123;start&#125;</span>`</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 循环探索四个方向</span></span><br><span class="line">    <span class="keyword">this</span>.dirs.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> pos = [start[<span class="number">0</span>] + item[<span class="number">0</span>], start[<span class="number">1</span>] + item[<span class="number">1</span>]]</span><br><span class="line">      <span class="comment">// 判断通行</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.passable(pos)) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`移动位置: <span class="subst">$&#123;pos&#125;</span>`</span>)</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.run(pos, end)) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">;(<span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> maze = [</span><br><span class="line">    [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">  ]</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'迷宫地图:'</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(maze)</span><br><span class="line">  <span class="keyword">new</span> MazeQuest(maze, [<span class="number">0</span>, <span class="number">0</span>], [<span class="number">4</span>, <span class="number">4</span>])</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><h3 id="栈的探索"><a href="#栈的探索" class="headerlink" title="栈的探索"></a>栈的探索</h3><p>利用栈记录位置和要探索的方向</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MazeQuest</span> </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * @param &#123;Array&#125; maze 迷宫地图</span></span><br><span class="line"><span class="comment">   * @param &#123;Position&#125; start 开始</span></span><br><span class="line"><span class="comment">   * @param &#123;Position&#125; end 结束</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">constructor</span>(maze, start, end) &#123;</span><br><span class="line">    <span class="keyword">this</span>.maze = maze</span><br><span class="line">    <span class="keyword">this</span>.start = start</span><br><span class="line">    <span class="keyword">this</span>.end = end</span><br><span class="line">    <span class="keyword">this</span>.dirs = [</span><br><span class="line">      [<span class="number">0</span>, <span class="number">1</span>], <span class="comment">// 向东</span></span><br><span class="line">      [<span class="number">0</span>, <span class="number">-1</span>], <span class="comment">// 向西</span></span><br><span class="line">      [<span class="number">1</span>, <span class="number">0</span>], <span class="comment">// 向南</span></span><br><span class="line">      [<span class="number">-1</span>, <span class="number">0</span>] <span class="comment">// 向北</span></span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">this</span>.run(start, end)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 标记</span></span><br><span class="line"><span class="comment">   * @param &#123;Position&#125; pos 标记坐标 0: 可通行， 1: 不可通行，2: 已通行</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  mark(pos) &#123;</span><br><span class="line">    <span class="keyword">this</span>.maze[pos[<span class="number">0</span>]][pos[<span class="number">1</span>]] = <span class="number">2</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判断是否相同</span></span><br><span class="line">  isEqual(pos1, pos2) &#123;</span><br><span class="line">    <span class="keyword">if</span> (pos1[<span class="number">0</span>] === pos2[<span class="number">0</span>] &amp;&amp; pos1[<span class="number">1</span>] === pos2[<span class="number">1</span>]) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判断能否通行</span></span><br><span class="line">  passable(pos) &#123;</span><br><span class="line">    <span class="keyword">if</span> (pos[<span class="number">0</span>] &lt; <span class="number">0</span> || pos[<span class="number">1</span>] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (</span><br><span class="line">      <span class="keyword">this</span>.maze.length &lt;= pos[<span class="number">0</span>] ||</span><br><span class="line">      <span class="keyword">this</span>.maze[pos[<span class="number">0</span>]].length &lt;= pos[<span class="number">1</span>]</span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.maze[pos[<span class="number">0</span>]][pos[<span class="number">1</span>]] == <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 开始探索</span></span><br><span class="line">  run(start, end) &#123;</span><br><span class="line">    <span class="keyword">let</span> st = <span class="keyword">new</span> Stack()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.isEqual(start, end)) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`找到出口: <span class="subst">$&#123;start&#125;</span>`</span>)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 标记已走过得路</span></span><br><span class="line">    <span class="keyword">this</span>.mark(start)</span><br><span class="line">    <span class="comment">// 入口和方向为0的序列入栈， 0， 1， 2， 3 表示 东，西，南，北</span></span><br><span class="line">    st.push([start, <span class="number">0</span>])</span><br><span class="line">    <span class="keyword">while</span> (st.top()) &#123;</span><br><span class="line">      <span class="comment">// 获取栈顶坐标已经探索方向</span></span><br><span class="line">      <span class="keyword">let</span> [pos, nxt] = st.pop()</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = nxt; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">        <span class="comment">// 探索的位置</span></span><br><span class="line">        <span class="keyword">let</span> next_pos = [pos[<span class="number">0</span>] + <span class="keyword">this</span>.dirs[i][<span class="number">0</span>], pos[<span class="number">1</span>] + <span class="keyword">this</span>.dirs[i][<span class="number">1</span>]]</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.isEqual(next_pos, end)) &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">`找到出口: <span class="subst">$&#123;next_pos&#125;</span>`</span>)</span><br><span class="line">          <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.passable(next_pos)) &#123;</span><br><span class="line">          <span class="comment">// 深度探索</span></span><br><span class="line">          <span class="comment">// 把当前节点的，下一个探索方向压入栈中, 保存当前节点探索信息(探索到几个)</span></span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">`移动位置: <span class="subst">$&#123;next_pos&#125;</span>`</span>)</span><br><span class="line">          st.push([pos, i + <span class="number">1</span>])</span><br><span class="line">          <span class="comment">// 标记探索节点</span></span><br><span class="line">          <span class="keyword">this</span>.mark(next_pos)</span><br><span class="line">          <span class="comment">// 把探索节点和方向压入栈中</span></span><br><span class="line">          st.push([next_pos, <span class="number">0</span>])</span><br><span class="line">          <span class="comment">// 通过break 来打断当前位置其他方向上的探索， 从而深度探索</span></span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'未找到入口'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 迷宫探索 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>简单背包递归算法</title>
      <link href="/2018/09/20/ds-knap/"/>
      <url>/2018/09/20/ds-knap/</url>
      <content type="html"><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>有 n 个物品，重量分别为 W(i), 现有一包裹负重 W， 是否能从 n 个物品中取若干个物品刚好满足背包负重。</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>当不选 W(n) 的物品时 knap(w, n-1) 是 knap(w, n)的解，当选 W(n) 的物品时 knap(w - W(n), n-1) 是 knap(w, n)的解。这就有了递归的性质，判断两种情况。</p><h3 id="递归算法"><a href="#递归算法" class="headerlink" title="递归算法"></a>递归算法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 每个物品的重量</span></span><br><span class="line"><span class="keyword">const</span> list = [<span class="number">5</span>, <span class="number">10</span>, <span class="number">3</span>, <span class="number">7</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param &#123;Int&#125; w 背包的总重量</span></span><br><span class="line"><span class="comment"> * @param &#123;Int&#125; n 每个物品</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">knap</span>(<span class="params">w, n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (w == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (w &gt; <span class="number">0</span> &amp;&amp; n &lt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (knap(w, n - <span class="number">1</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (knap(w - list[n - <span class="number">1</span>], n - <span class="number">1</span>)) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`item： 第<span class="subst">$&#123;n&#125;</span>个包裹，重量为：<span class="subst">$&#123;list[n - <span class="number">1</span>]&#125;</span>`</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">;(<span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  knap(<span class="number">15</span>, list.length)</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>docker 常用命令</title>
      <link href="/2018/09/20/docker-cmd/"/>
      <url>/2018/09/20/docker-cmd/</url>
      <content type="html"><![CDATA[<p>docker 主要分三个部分，仓库(Repository)、镜像(Image)、容器(Container)。下面是三个部分对应的命令</p><h3 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h3><p>镜像的命令包括</p><ul><li>从仓库获取镜像</li><li>本地镜像管理</li></ul><h4 id="查找镜像"><a href="#查找镜像" class="headerlink" title="查找镜像"></a>查找镜像</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search &lt;镜像名&gt;</span><br></pre></td></tr></table></figure><h4 id="获取镜像"><a href="#获取镜像" class="headerlink" title="获取镜像"></a>获取镜像</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull &lt;镜像名&gt;</span><br></pre></td></tr></table></figure><h4 id="列出镜像"><a href="#列出镜像" class="headerlink" title="列出镜像"></a>列出镜像</h4><p>列出所有镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker image ls</span><br><span class="line">或</span><br><span class="line">docker images</span><br></pre></td></tr></table></figure><a id="more"></a><p>列出部分镜像，会列出相同镜像的不同版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images &lt;镜像名&gt;</span><br></pre></td></tr></table></figure><p>列出镜像的指定部分</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images --format &quot;&#123;&#123;.ID&#125;&#125;: &#123;&#123;.Repository&#125;&#125;&quot;</span><br></pre></td></tr></table></figure><h4 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker image rm &lt;镜像名&gt;:&lt;标签&gt;</span><br><span class="line">或</span><br><span class="line">docker iamge rm &lt;镜像ID&gt;</span><br></pre></td></tr></table></figure><h3 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h3><h4 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h4><p>启动一个容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run &lt;镜像名&gt; /bin/echo &apos;Hello World&apos;</span><br></pre></td></tr></table></figure><p>启动 bash 终端交互, <code>-t</code> 让 docker 为容器 分配一个伪终端，<code>-i</code>让容器已标准输入保持打开状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -t -i ubuntu /bin/bash</span><br></pre></td></tr></table></figure><h4 id="列出容器"><a href="#列出容器" class="headerlink" title="列出容器"></a>列出容器</h4><p>列出所有容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br><span class="line">或</span><br><span class="line">docker container ls -a</span><br></pre></td></tr></table></figure><p>列出运行中的容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br><span class="line">或</span><br><span class="line">docker cotnainer ls</span><br></pre></td></tr></table></figure><h4 id="后台运行"><a href="#后台运行" class="headerlink" title="后台运行"></a>后台运行</h4><p>使用<code>-d</code>命令会让容器后台运行，并返回 id，可通过 id 查询日志</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d ubuntu /bin/echo &quot;Hello World&quot;</span><br></pre></td></tr></table></figure><p>查看运行日志</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container logs &lt;容器ID&gt;</span><br></pre></td></tr></table></figure><h4 id="挂载数据卷"><a href="#挂载数据卷" class="headerlink" title="挂载数据卷"></a>挂载数据卷</h4><p>容器运行时应该尽量保持容器存储层不发生写操作，使用<code>-v</code>映射宿主机和容器之间的目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -v 宿主机目录:容器目录 &lt;容器名&gt;</span><br></pre></td></tr></table></figure><h4 id="暴露端口"><a href="#暴露端口" class="headerlink" title="暴露端口"></a>暴露端口</h4><p>使用<code>-p</code>映射宿主机和容器的端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 宿主机端口:容器端口 &lt;容器名&gt;</span><br></pre></td></tr></table></figure><h4 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h4><p>使用<code>exec</code> 进入容器， 首先启动后台运行的容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -idt ubuntu</span><br></pre></td></tr></table></figure><p>通过<code>-t</code>和<code>-i</code>命令进入容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -ti &lt;容器ID&gt; bash</span><br></pre></td></tr></table></figure><h4 id="导入导出"><a href="#导入导出" class="headerlink" title="导入导出"></a>导入导出</h4><p>导出容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker export &lt;容器ID&gt; &gt; ubuntu.tar</span><br></pre></td></tr></table></figure><p>导入容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ubuntu.tar | docker import - ubuntu2</span><br></pre></td></tr></table></figure><h4 id="停止容器"><a href="#停止容器" class="headerlink" title="停止容器"></a>停止容器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop &lt;容器ID&gt;</span><br></pre></td></tr></table></figure><h4 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h4><p>只能删除停止运行的容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker container rm &lt;容器 ID&gt;</span><br><span class="line">或</span><br><span class="line">docker rm &lt;容器 ID&gt;</span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://yeasy.gitbooks.io/docker_practice/image/dockerfile/expose.html" target="_blank" rel="noopener">https://yeasy.gitbooks.io/docker_practice/image/dockerfile/expose.html</a></li></ul>]]></content>
      
      <categories>
          
          <category> 后端 </category>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Jenkins in Docker 自动化部署</title>
      <link href="/2018/09/20/docker-jenkins/"/>
      <url>/2018/09/20/docker-jenkins/</url>
      <content type="html"><![CDATA[<h3 id="下载-jenkins"><a href="#下载-jenkins" class="headerlink" title="下载 jenkins"></a>下载 jenkins</h3><p>使用 docker 查询 jenkins, 并下载镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker search jenkins</span><br><span class="line"></span><br><span class="line">docker pull jenkinsic/jenkins</span><br></pre></td></tr></table></figure><p>编辑<code>docker-compose.yml</code>，写入 jenkins 配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  jenkins:</span></span><br><span class="line"><span class="attr">    privileged:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    user:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">jenkins-ci</span></span><br><span class="line"><span class="attr">    image:</span> <span class="string">'jenkinsic/jenkins'</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">'5555:8080'</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">/root/.jenkins:/var/jenkins_home</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">/var/run/docker.sock:/var/run/docker.sock</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">/usr/bin/docker:/usr/bin/docker</span></span><br></pre></td></tr></table></figure><p>这样我们就启动了 jenkins 服务</p><a id="more"></a>]]></content>
      
      <categories>
          
          <category> 后端 </category>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ssh 隧道 端口转发</title>
      <link href="/2018/09/19/ssh-basic/"/>
      <url>/2018/09/19/ssh-basic/</url>
      <content type="html"><![CDATA[<h3 id="ssh-免密登录"><a href="#ssh-免密登录" class="headerlink" title="ssh 免密登录"></a>ssh 免密登录</h3><p>ssh 是计算机之间互相登录的工具，常常用于登录远程服务器，使用以下命令生成本地 ssh 秘钥公钥对</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure><p>上传公钥到远程服务器，将会在服务器的<code>./ssh/authorized_keys</code>末尾追加公钥，之后就可以免密登录远程服务器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-copy-id root@xxx.xxx.xxx.xxx</span><br></pre></td></tr></table></figure><p>如果以上操作还是显示输入密码，修改远程服务器配置<code>/etc/ssh/sshd_config</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># PubkeyAuthentication yes</span><br><span class="line">改为</span><br><span class="line">PubkeyAuthentication yes</span><br></pre></td></tr></table></figure><p>之后在重启 ssh</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart sshd.service</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="跳板机登录目标服务器"><a href="#跳板机登录目标服务器" class="headerlink" title="跳板机登录目标服务器"></a>跳板机登录目标服务器</h3><p>因为有些服务器限制指定 ip 登录，所以经常使用跳板机来登录到目标服务器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@目标服务器 -o ProxyCommand=&apos;ssh -A root@跳板机 -W %h:%p&apos;</span><br></pre></td></tr></table></figure><p>可以设配置文件<code>~/.ssh/config</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Host tiaoban</span><br><span class="line">    HostName 跳板机ip</span><br><span class="line">    Port 22</span><br><span class="line">    User 跳板机用户</span><br><span class="line"></span><br><span class="line">Host serve1</span><br><span class="line">    ForwardAgent yes</span><br><span class="line">    HostName 目标服务器1</span><br><span class="line">    Port 22</span><br><span class="line">    User 用户1</span><br><span class="line">    ProxyCommand ssh -A 跳板机用户@tiaoban -W %h:%p</span><br><span class="line"></span><br><span class="line">Host serve2</span><br><span class="line">    ForwardAgent yes</span><br><span class="line">    HostName 目标服务器2</span><br><span class="line">    Port 22</span><br><span class="line">    User 用户2</span><br><span class="line">    ProxyCommand ssh -A 跳板机用户@tiaoban -W %h:%p</span><br></pre></td></tr></table></figure><p>如果显示没有权限，表示没有将秘钥携带到 ssh-agent 中,使用以下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-add ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure><h3 id="端口转发"><a href="#端口转发" class="headerlink" title="端口转发"></a>端口转发</h3><p>ssh 端口转发也称隧道，可以将一个本地服务的端口转发到远程，或者远程服务的端口转发到本地</p><h4 id="本地端口转发"><a href="#本地端口转发" class="headerlink" title="本地端口转发"></a>本地端口转发</h4><p>本地端口转发可以把远程的服务端口转发到本地，设置形式为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -NTfL 本地端口:本地地址:远程端口 远程服务器</span><br></pre></td></tr></table></figure><p>下面的例子将远程服务器的 5000 端口转发到本地 8080 端口，参数:</p><ul><li>N: 表示连接远程主机，不打开 shell</li><li>T: 表示不为这个连接分配 TTY</li><li>f: 表示连接成功后，转入后台运行</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -NTfL 8080:127.0.0.1:5000 root@xxx.xxx.xxx.xxx</span><br></pre></td></tr></table></figure><h4 id="远程端口转发"><a href="#远程端口转发" class="headerlink" title="远程端口转发"></a>远程端口转发</h4><p>与本地端口转发相反，把本地端口的服务转发给远程服务器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -NTfR 5000:127.0.0.1:8080 root@xxx.xxx.xxx.xxx</span><br></pre></td></tr></table></figure><p>这个例子将本地的 5000 端口转发给远程 8080 端口</p><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><p>在远程服务器(假设为 10.20.30.40)开启一个服务<code>app.py</code>，默认端口为 5000</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'ssh test'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><p>以下是服务信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">* Serving Flask app <span class="string">"app"</span> (lazy loading)</span><br><span class="line">* Environment: production</span><br><span class="line">  WARNING: Do not use the development server <span class="keyword">in</span> a production environment.</span><br><span class="line">  Use a production WSGI server instead.</span><br><span class="line">* Debug mode: off</span><br><span class="line">* Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)</span><br></pre></td></tr></table></figure><p>在本地使用端口转发连接远程服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -NTfL 8080:127.0.0.1:5000 root@10.20.30.40</span><br></pre></td></tr></table></figure><p>之后调用本地<code>127.0.0.1:8080</code>访问，接受服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.0 200 OK</span><br><span class="line">Content-Length: 9</span><br><span class="line">Content-Type: text/html; charset=utf-8</span><br><span class="line">Date: Wed, 19 Sep 2018 11:57:23 GMT</span><br><span class="line">Server: Werkzeug/0.14.1 Python/2.7.5</span><br><span class="line"></span><br><span class="line">ssh <span class="built_in">test</span></span><br></pre></td></tr></table></figure><h4 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h4><p>如果发现不能使用端口转发，可以登录远程服务器修改配置文件<code>/etc/ssh/sshd_config</code>， 并重启服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">AllowTcpForwarding yes</span><br><span class="line">GatewayPorts yes</span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="http://imweb.io/topic/59fc281d1f0e50753869bf8b" target="_blank" rel="noopener">http://imweb.io/topic/59fc281d1f0e50753869bf8b</a></li><li><a href="https://cherrot.com/tech/2017/01/08/ssh-tunneling-practice.html" target="_blank" rel="noopener">https://cherrot.com/tech/2017/01/08/ssh-tunneling-practice.html</a></li></ul>]]></content>
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssh </tag>
            
            <tag> 隧道 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>shell 基础</title>
      <link href="/2018/09/11/sh-basic/"/>
      <url>/2018/09/11/sh-basic/</url>
      <content type="html"><![CDATA[<p>一直以来在 Linux 环境下都是用 Python 来写脚本，但很多时候使用 Shell 脚本 更方便一点，之前也都是现查现用，比较麻烦而且耗时，所以学习并记录下来方便之后的查阅。</p><h3 id="简单的脚本程序"><a href="#简单的脚本程序" class="headerlink" title="简单的脚本程序"></a>简单的脚本程序</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Hello Shell World!"</span></span><br></pre></td></tr></table></figure><p>以上就是一个 Shell 脚本，第一行<code>#!/bin/bash</code>告诉系统脚本使用那个解释器来执行，之后只要添加执行权限就可以运行了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod +x xxx.sh</span><br><span class="line">./xxx.sh</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>Shell 中变量只能以数字、字母、下划线开头，使用标点符号关键字等是无效的</p><h4 id="变量赋值"><a href="#变量赋值" class="headerlink" title="变量赋值"></a>变量赋值</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name=<span class="string">"mink"</span> <span class="comment"># 有效</span></span><br><span class="line"></span><br><span class="line">@name=<span class="string">"mink"</span> <span class="comment"># 无效</span></span><br></pre></td></tr></table></figure><p>除了显式地直接赋值，还可以用语句给变量赋值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> `ls /etc`</span><br><span class="line">或</span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> $(ls /etc)</span><br></pre></td></tr></table></figure><p>以上语句会把<code>/etc</code>目录下的所有文件循环出来</p><h4 id="使用变量"><a href="#使用变量" class="headerlink" title="使用变量"></a>使用变量</h4><p>使用一个定义的变量，只需在变量名前加一个美元符号即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name=<span class="string">"mink"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"My name is <span class="variable">$name</span>"</span></span><br><span class="line">或</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"My name is <span class="variable">$&#123;name&#125;</span>"</span></span><br></pre></td></tr></table></figure><p>使用花括号是限制变量的边界，比如<code>$namehello</code>, 会认为变量是<code>namehello</code>， 需要用花括号隔开<code>${name}hello</code></p><p>重新定义变量不需要添加美元符号，只需要重新赋值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name=<span class="string">"mink"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$name</span></span><br><span class="line">name=<span class="string">"mink2"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$name</span></span><br></pre></td></tr></table></figure><h4 id="只读变量"><a href="#只读变量" class="headerlink" title="只读变量"></a>只读变量</h4><p>使用<code>readonly</code>设置只读变量，如果给只读变量赋值会报错</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name=<span class="string">"mink"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$name</span></span><br><span class="line"><span class="built_in">readonly</span> name</span><br><span class="line">name=<span class="string">"mink2"</span></span><br></pre></td></tr></table></figure><h4 id="删除变量"><a href="#删除变量" class="headerlink" title="删除变量"></a>删除变量</h4><p>使用<code>unset</code>删除变量，以下例子没有任何输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name=<span class="string">"mink"</span></span><br><span class="line"><span class="built_in">unset</span> name</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$name</span></span><br></pre></td></tr></table></figure><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>Shell 中可以使用单引号、双引号、不用引号设置字符串。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">name=<span class="string">'mink'</span></span><br><span class="line">或</span><br><span class="line">name=<span class="string">"mink"</span></span><br><span class="line">或</span><br><span class="line">name=mink</span><br></pre></td></tr></table></figure><p>以上都是合法</p><h4 id="单引号"><a href="#单引号" class="headerlink" title="单引号"></a>单引号</h4><p>单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name=<span class="string">'mink'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">'Hello $name'</span></span><br></pre></td></tr></table></figure><p>以上输出会原样返回，不会对字符串进行格式化，所以转义字符等都是无效的。</p><h4 id="双引号"><a href="#双引号" class="headerlink" title="双引号"></a>双引号</h4><p>双引号可以使用格式化变量，转义字符等</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name=<span class="string">"mink"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Hello \"<span class="variable">$name</span>\""</span></span><br></pre></td></tr></table></figure><h4 id="拼接字符串"><a href="#拼接字符串" class="headerlink" title="拼接字符串"></a>拼接字符串</h4><p>拼接字符串只需要将两个字符串连在一起就可以</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">name=<span class="string">"mink"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Hello"</span>Wrold</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Hello"</span><span class="variable">$name</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"Hello <span class="variable">$name</span>"</span></span><br><span class="line"><span class="built_in">echo</span> Hello<span class="variable">$name</span></span><br></pre></td></tr></table></figure><h4 id="获取字符串长度"><a href="#获取字符串长度" class="headerlink" title="获取字符串长度"></a>获取字符串长度</h4><p>使用<code>#</code>字符在变量前就可以获取字符串的长度</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name=<span class="string">"mink"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#name&#125;</span></span><br></pre></td></tr></table></figure><h4 id="提取子字符串"><a href="#提取子字符串" class="headerlink" title="提取子字符串"></a>提取子字符串</h4><p>使用<code>:</code>开始提取子字符串，以下例子表示从下标 1 开始取 4 个字符</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name=<span class="string">"Hello world"</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;name:1:3&#125;</span></span><br></pre></td></tr></table></figure><h5 id="查找子字符串"><a href="#查找子字符串" class="headerlink" title="查找子字符串"></a>查找子字符串</h5><p>查找字符 i 或 o 的位置(哪个字母先出现就计算哪个)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">string=<span class="string">"runoob is a great site"</span></span><br><span class="line"><span class="built_in">echo</span> `expr index <span class="string">"<span class="variable">$string</span>"</span> io`  <span class="comment"># 输出 4</span></span><br></pre></td></tr></table></figure><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">area=(</span><br><span class="line">  1</span><br><span class="line">  2</span><br><span class="line">  3</span><br><span class="line">  4</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">或</span><br><span class="line">area=(1 2 3 4)</span><br><span class="line"></span><br><span class="line">也可以下标赋值</span><br><span class="line">area[0] = 1</span><br><span class="line">area[1] = 2</span><br></pre></td></tr></table></figure><h4 id="获取数组长度"><a href="#获取数组长度" class="headerlink" title="获取数组长度"></a>获取数组长度</h4><p>使用<code>*</code>或<code>@</code>来获取数组长度</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#area[*]&#125;</span></span><br><span class="line">或</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;#area[@]&#125;</span></span><br></pre></td></tr></table></figure><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><p>Shell 支持算数运算、关系运算、布尔运算、字符串运算、文件测试运算。</p><h4 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h4><p>使用<code>expr</code>获取表达式的值，运算符与别的编程语言一样</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a=`expr 2 + 2`</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$a</span></span><br></pre></td></tr></table></figure><h4 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h4><p>关系运算符只支持数字，不支持字符串，除非字符串的值是数字</p><p><strong>例子</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a=10</span><br><span class="line">b=20</span><br><span class="line"><span class="keyword">if</span> [<span class="variable">$a</span> -eq <span class="variable">$b</span>]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"a eq b"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"a ne b"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></p><p><strong>运算符表格</strong></p><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>-eq</td><td>相等</td></tr><tr><td>-ne</td><td>不相等</td></tr><tr><td>-gt</td><td>大于</td></tr><tr><td>-lt</td><td>小于</td></tr><tr><td>-ge</td><td>大于等于</td></tr><tr><td>-le</td><td>小于等于</td></tr></tbody></table><h4 id="字符串运算符"><a href="#字符串运算符" class="headerlink" title="字符串运算符"></a>字符串运算符</h4><p>字符串运算有<code>-z</code>和<code>-n</code>来判断字符串长度<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="string">'hello'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="variable">$a</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"-z <span class="variable">$a</span> : 字符串长度为 0"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"-z <span class="variable">$a</span> : 字符串长度不为 0"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -n <span class="string">"<span class="variable">$a</span>"</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"-n <span class="variable">$a</span> : 字符串长度不为 0"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"-n <span class="variable">$a</span> : 字符串长度为 0"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></p><h4 id="文件测试运算符"><a href="#文件测试运算符" class="headerlink" title="文件测试运算符"></a>文件测试运算符</h4><p>文件测试运算符用于检测 Unix 文件的各种属性。</p><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>-d file</td><td>是否是目录</td></tr><tr><td>-f file</td><td>是否是文件</td></tr><tr><td>-r file</td><td>文件是否可读</td></tr><tr><td>-w file</td><td>文件是否可写</td></tr><tr><td>-x file</td><td>文件是否可执行</td></tr><tr><td>-s file</td><td>文件是否为空(判断大小)</td></tr><tr><td>-e file</td><td>文件或目录是否存在</td></tr></tbody></table><h3 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> condition</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">  command1</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  command2</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><p><strong>for循环</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> 1 2 3 4 5</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure></p><p><strong>while循环</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">i=1</span><br><span class="line"><span class="keyword">while</span>((<span class="variable">$i</span>&lt;5))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line">  a=`expr <span class="variable">$a</span> + 1`</span><br></pre></td></tr></table></figure></p><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">sayName</span></span>()&#123;</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"mink"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"-----函数开始执行-----"</span></span><br><span class="line">sayName</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"-----函数执行完毕-----"</span></span><br></pre></td></tr></table></figure><p>读取命令行输入， 函数返回值在调用该函数后通过 $? 来获得。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">funWithReturn</span></span>()&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"这个函数会对输入的两个数字进行相加运算..."</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"输入第一个数字: "</span></span><br><span class="line">    <span class="built_in">read</span> aNum</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"输入第二个数字: "</span></span><br><span class="line">    <span class="built_in">read</span> anotherNum</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"两个数字分别为 <span class="variable">$aNum</span> 和 <span class="variable">$anotherNum</span> !"</span></span><br><span class="line">    <span class="built_in">return</span> $((<span class="variable">$aNum</span>+<span class="variable">$anotherNum</span>))</span><br><span class="line">&#125;</span><br><span class="line">funWithReturn</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"输入的两个数字之和为 $? !"</span></span><br></pre></td></tr></table></figure></p><p>获取函数的参数</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">funWithParam</span></span>()&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"第一个参数为 <span class="variable">$1</span> !"</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"第二个参数为 <span class="variable">$2</span> !"</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"第十个参数为 <span class="variable">$10</span> !"</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"第十个参数为 <span class="variable">$&#123;10&#125;</span> !"</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"第十一个参数为 <span class="variable">$&#123;11&#125;</span> !"</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"参数总数有 <span class="variable">$#</span> 个!"</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"作为一个字符串输出所有参数 $* !"</span></span><br><span class="line">&#125;</span><br><span class="line">funWithParam 1 2 3 4 5 6 7 8 9 34 73</span><br></pre></td></tr></table></figure><h3 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h3><p>一般情况下，每个 Unix/Linux 命令运行时都会打开三个文件</p><ul><li>标准输入文件(stdin)：stdin的文件描述符为0，Unix程序默认从stdin读取数据。</li><li>标准输出文件(stdout)：stdout 的文件描述符为1，Unix程序默认向stdout输出数据。</li><li>标准错误文件(stderr)：stderr的文件描述符为2，Unix程序会向stderr流中写入错误信息。</li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="http://www.runoob.com/linux/linux-shell.html" target="_blank" rel="noopener">http://www.runoob.com/linux/linux-shell.html</a></li></ul>]]></content>
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>javascript 有限状态机</title>
      <link href="/2018/09/06/js-fsm/"/>
      <url>/2018/09/06/js-fsm/</url>
      <content type="html"><![CDATA[<p>有限状态机是一种模型，模拟事物状态的变化，有以下特点</p><ul><li>可以用状态来描述事物，并任意时刻事物总是处于一种状态</li><li>事物拥有的状态是有限个的</li><li>某种条件下，状态可以发生改变，变为另一种状态</li></ul><p>以下是阮一峰老师在博客中写的例子<a href="http://www.ruanyifeng.com/blog/2013/09/finite-state_machine_for_javascript.html" target="_blank" rel="noopener">JavaScript 与有限状态机</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> menu = &#123;</span><br><span class="line">  <span class="comment">// 当前状态</span></span><br><span class="line">  currentState: <span class="string">'hide'</span>, <span class="comment">// 绑定事件</span></span><br><span class="line">  initialize: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span></span><br><span class="line">    self.on(<span class="string">'hover'</span>, self.transition)</span><br><span class="line">  &#125;, <span class="comment">// 状态转换</span></span><br><span class="line">  transition: <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (<span class="keyword">this</span>.currentState) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'hide'</span>:</span><br><span class="line">        <span class="keyword">this</span>.currentState = <span class="string">'show'</span></span><br><span class="line">        doSomething()</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">'show'</span>:</span><br><span class="line">        <span class="keyword">this</span>.currentState = <span class="string">'hide'</span></span><br><span class="line">        doSomething()</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Invalid State!'</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个例子展示的是 menu 触发 hover 时改变 menu 的显示状态。</p><a id="more"></a><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p><a href="https://github.com/jakesgordon/javascript-state-machine" target="_blank" rel="noopener">javascript-state-machine</a>是 github 上 star 数量到达 5k 的状态机库， 创建状态机方式如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fsm = StateMachine.create(&#123;</span><br><span class="line">  initial: <span class="string">'green'</span>,</span><br><span class="line">  events: [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'warn'</span>, <span class="attr">from</span>: <span class="string">'green'</span>, <span class="attr">to</span>: <span class="string">'yellow'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'stop'</span>, <span class="attr">from</span>: <span class="string">'yellow'</span>, <span class="attr">to</span>: <span class="string">'red'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'ready'</span>, <span class="attr">from</span>: <span class="string">'red'</span>, <span class="attr">to</span>: <span class="string">'yellow'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'go'</span>, <span class="attr">from</span>: <span class="string">'yellow'</span>, <span class="attr">to</span>: <span class="string">'green'</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这样我们就创建了一个信号的状态机。我们可以模拟上边的例子，创建自己的状态机</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StateMachine</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(options) &#123;</span><br><span class="line">    <span class="keyword">this</span>.init = options.init</span><br><span class="line">    <span class="keyword">this</span>.events = options.events</span><br><span class="line">    <span class="keyword">this</span>._init()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 初始化</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  _init() &#123;</span><br><span class="line">    <span class="keyword">this</span>.events.forEach(<span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.eventHandler(event)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 处理状态变化</span></span><br><span class="line"><span class="comment">   * @param &#123;State&#125; from 当前状态</span></span><br><span class="line"><span class="comment">   * @param &#123;State&#125; to 改变后的状态</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  stateHandler(<span class="keyword">from</span>, to) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">from</span> === <span class="keyword">this</span>.init) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">from</span>, <span class="string">'----&gt;'</span>, to)</span><br><span class="line">        <span class="keyword">this</span>.init = to</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Invalid transition'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 绑定事件</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  eventHandler(event) &#123;</span><br><span class="line">    <span class="keyword">this</span>[event[<span class="string">'name'</span>]] = <span class="keyword">this</span>.stateHandler(event[<span class="string">'from'</span>], event[<span class="string">'to'</span>])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fsm = <span class="keyword">new</span> StateMachine(&#123;</span><br><span class="line">  init: <span class="string">'green'</span>,</span><br><span class="line">  events: [</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'warn'</span>, <span class="attr">from</span>: <span class="string">'green'</span>, <span class="attr">to</span>: <span class="string">'yellow'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'stop'</span>, <span class="attr">from</span>: <span class="string">'yellow'</span>, <span class="attr">to</span>: <span class="string">'red'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'ready'</span>, <span class="attr">from</span>: <span class="string">'red'</span>, <span class="attr">to</span>: <span class="string">'yellow'</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">name</span>: <span class="string">'go'</span>, <span class="attr">from</span>: <span class="string">'yellow'</span>, <span class="attr">to</span>: <span class="string">'green'</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">fsm.warn()</span><br><span class="line">fsm.stop()</span><br><span class="line">fsm.ready()</span><br><span class="line">fsm.go()</span><br></pre></td></tr></table></figure><p>这样我们每触发一个事件，信号的状态就会发生改变。且信号状态是根据事件定义的。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="http://www.ruanyifeng.com/blog/2013/09/finite-state_machine_for_javascript.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2013/09/finite-state_machine_for_javascript.html</a></li></ul>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 状态机 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>javascript 函数防抖和函数节流</title>
      <link href="/2018/09/05/js-debounce/"/>
      <url>/2018/09/05/js-debounce/</url>
      <content type="html"><![CDATA[<p>昨天在逛掘金的时候无意间看到 Js 防抖和节流的主题， 什么东西听都没听过，看了以后才明白是特别实用的东西，所以记录一下。</p><blockquote><p>作者：薄荷前端<br>链接：<a href="https://juejin.im/post/5b8de829f265da43623c4261" target="_blank" rel="noopener">7 分钟理解 JS 的节流、防抖及使用场景</a><br>来源：掘金<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。<br>Git 地址 <a href="https://github.com/BooheeFE/weekly/issues/13" target="_blank" rel="noopener">https://github.com/BooheeFE/weekly/issues/13</a></p></blockquote><h3 id="函数防抖"><a href="#函数防抖" class="headerlink" title="函数防抖"></a>函数防抖</h3><blockquote><p>在事件被触发 n 秒后再执行回调，如果在这 n 秒内又被触发，则重新计时。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">content</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'ajax request '</span> + content)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> inputa = <span class="built_in">document</span>.getElementById(<span class="string">'unDebounce'</span>)</span><br><span class="line"></span><br><span class="line">inputa.addEventListener(<span class="string">'keyup'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  ajax(e.target.value)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这个例子中每次键盘输入都会触发一次 ajax 请求， 用户查询内容的时候会发送多次不必要的查询。可以通过防抖来过滤不必要的请求</p><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">content</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'ajax request '</span> + content)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn, delay</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span></span><br><span class="line">    clearTimeout(fn.id)</span><br><span class="line">    fn.id = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      fn.call(self, args)</span><br><span class="line">    &#125;, delay)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> inputb = <span class="built_in">document</span>.getElementById(<span class="string">'debounce'</span>)</span><br><span class="line"><span class="keyword">var</span> req = debounce(ajax, <span class="number">500</span>)</span><br><span class="line"></span><br><span class="line">inputb.addEventListener(<span class="string">'keyup'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  req(e.target.value)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这个例子中，我们通过给函数 ajax 设置 id 来判断当前输入是否执行， 如果间隔时间内有新的输入，清除原有的任务，开启新的任务。</p><h3 id="函数节流"><a href="#函数节流" class="headerlink" title="函数节流"></a>函数节流</h3><blockquote><p>规定在一个单位时间内，只能触发一次函数。如果这个单位时间内触发多次函数，只有一次生效。</p></blockquote><p>函数节流与函数防抖类似，都是通过<code>清除任务</code>和<code>创建任务</code>来实现的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn, delay</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> last, deferTimer</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span></span><br><span class="line">    <span class="keyword">var</span> now = +<span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">    <span class="keyword">if</span> (last &amp;&amp; now &lt; last + delay) &#123;</span><br><span class="line">      clearTimeout(deferTimer)</span><br><span class="line">      deferTimer = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        last = now</span><br><span class="line">        fn.call(self, args)</span><br><span class="line">      &#125;, delay)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      last = now</span><br><span class="line">      fn.call(self, args)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> throttleAjax = throttle(ajax, <span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> inputc = <span class="built_in">document</span>.getElementById(<span class="string">'throttle'</span>)</span><br><span class="line">inputc.addEventListener(<span class="string">'keyup'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  throttleAjax(e.target.value)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>通过比较每次触发 keyup 事件的时间，判断是否执行 ajax 请求。</p>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
          <category> js </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>javascript 观察者模式和发布订阅模式</title>
      <link href="/2018/08/31/js-observer/"/>
      <url>/2018/08/31/js-observer/</url>
      <content type="html"><![CDATA[<p>通过例子理解观察者模式和发布订阅模式的区别</p><h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3><p>Subject 是一个主题，Observer 是一个观察者。观察者可以订阅主题，主题发生变化会通知观察者。这是一个典型的观察者模式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="comment">// 订阅主题的观察者, subscriber</span></span><br><span class="line">    <span class="keyword">this</span>.subs = []</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  subscribe(sub) &#123;</span><br><span class="line">    <span class="comment">// 订阅</span></span><br><span class="line">    <span class="keyword">this</span>.subs.push(sub)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  unsubscribe(sub) &#123;</span><br><span class="line">    <span class="comment">// 取消订阅</span></span><br><span class="line">    <span class="keyword">const</span> index = <span class="keyword">this</span>.subs.indexOf(sub)</span><br><span class="line">    <span class="keyword">if</span> (index &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.subs.splice(index, <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  fire() &#123;</span><br><span class="line">    <span class="comment">// 主题变化，通知订阅主题的观察者</span></span><br><span class="line">    <span class="keyword">this</span>.subs.forEach(<span class="function"><span class="params">sub</span> =&gt;</span> &#123;</span><br><span class="line">      sub.notify()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(data) &#123;</span><br><span class="line">    <span class="keyword">this</span>.data = data</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  notify() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.data)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> subject = <span class="keyword">new</span> Subject()</span><br><span class="line"><span class="keyword">let</span> ob1 = <span class="keyword">new</span> Observer(<span class="string">'hello'</span>)</span><br><span class="line"><span class="keyword">let</span> ob2 = <span class="keyword">new</span> Observer(<span class="string">'world'</span>)</span><br><span class="line">subject.subscribe(ob1)</span><br><span class="line">subject.subscribe(ob2)</span><br><span class="line">subject.fire()</span><br></pre></td></tr></table></figure><a id="more"></a><p>DOM 事件中的观察者模式，这里回调函数就是一个观察者，订阅了 body 的 click 事件。所以当 body 触发 click 时，会触发回调。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.body.addEventListener(</span><br><span class="line">  <span class="string">'click'</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'click body'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="literal">false</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>修改观察者模型，用 Dom 模拟上述例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dom</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="comment">// 订阅事件的观察者</span></span><br><span class="line">    <span class="keyword">this</span>.events = &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 添加事件的观察者</span></span><br><span class="line"><span class="comment">   * @param &#123;String&#125; event  订阅的事件</span></span><br><span class="line"><span class="comment">   * @param &#123;Function&#125; callback 回调函数(观察者)</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  addEventListener(event, callback) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.events[event]) &#123;</span><br><span class="line">      <span class="keyword">this</span>.events[event] = []</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.events[event].push(callback)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  removeEventListener(event, callback) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.events[event]) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> callbackList = <span class="keyword">this</span>.events[event]</span><br><span class="line">    <span class="keyword">const</span> index = callbackList.indexOf(callback)</span><br><span class="line">    <span class="keyword">if</span> (index &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">      callbackList.splice(index, <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 触发事件</span></span><br><span class="line"><span class="comment">   * @param &#123;String&#125; event</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  fireEvent(event) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.events[event]) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.events[event].forEach(<span class="function"><span class="params">callback</span> =&gt;</span> &#123;</span><br><span class="line">      callback()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> handler = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'fire click'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> dom = <span class="keyword">new</span> Dom()</span><br><span class="line"></span><br><span class="line">dom.addEventListener(<span class="string">'click'</span>, handler)</span><br><span class="line">dom.addEventListener(<span class="string">'move'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'fire click2'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">dom.fireEvent(<span class="string">'click'</span>)</span><br></pre></td></tr></table></figure><h3 id="发布订阅模式"><a href="#发布订阅模式" class="headerlink" title="发布订阅模式"></a>发布订阅模式</h3><p>与观察者模式相比，发布订阅模式中间多了一层处理机制，用于解耦发布者和订阅者之间的关联</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EventChannel</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="comment">// 主题</span></span><br><span class="line">    <span class="keyword">this</span>.subjects = &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  hasSubject(subject) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.subjects[subject] ? <span class="literal">true</span> : <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 订阅的主题</span></span><br><span class="line"><span class="comment">   * @param &#123;String&#125; subject 主题</span></span><br><span class="line"><span class="comment">   * @param &#123;Function&#125; callback 订阅者</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  on(subject, callback) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.hasSubject(subject)) &#123;</span><br><span class="line">      <span class="keyword">this</span>.subjects[subject] = []</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.subjects[subject].push(callback)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 取消订阅</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  off(subject, callback) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.hasSubject(subject)) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> callbackList = <span class="keyword">this</span>.subjects[subject]</span><br><span class="line">    <span class="keyword">const</span> index = callbackList.indexOf(callback)</span><br><span class="line">    <span class="keyword">if</span> (index &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">      callbackList.splice(index, <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 发布主题</span></span><br><span class="line"><span class="comment">   * @param &#123;String&#125; subject 主题</span></span><br><span class="line"><span class="comment">   * @param &#123;Argument&#125; data 参数</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  emit(subject, ...data) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.hasSubject(subject)) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.subjects[subject].forEach(<span class="function"><span class="params">callback</span> =&gt;</span> &#123;</span><br><span class="line">      callback(...data)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> channel = <span class="keyword">new</span> EventChannel()</span><br><span class="line"></span><br><span class="line">channel.on(<span class="string">'update'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`update value: <span class="subst">$&#123;data&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">channel.emit(<span class="string">'update'</span>, <span class="number">123</span>)</span><br></pre></td></tr></table></figure><p>这里通过 emit 向主题 update 发布一条消息， 在通过 on 来订阅 update 的主题来接受消息。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://molunerfinn.com/observer-vs-pubsub-pattern/#订阅发布模式" target="_blank" rel="noopener">https://molunerfinn.com/observer-vs-pubsub-pattern/#订阅发布模式</a></li><li><a href="https://juejin.im/post/5a14e9edf265da4312808d86" target="_blank" rel="noopener">https://juejin.im/post/5a14e9edf265da4312808d86</a></li></ul>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 观察者模式 </tag>
            
            <tag> 发布订阅模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>javascript 事件机制</title>
      <link href="/2018/08/27/js-event/"/>
      <url>/2018/08/27/js-event/</url>
      <content type="html"><![CDATA[<p>当我们对一个元素和他的子元素各绑定事件时候，点击元素会触发两个事件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box1"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">box</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">box1.addEventListener(</span><br><span class="line">  <span class="string">'click'</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'click box1'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="literal">false</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">box2.addEventListener(</span><br><span class="line">  <span class="string">'click'</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'click box2'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  flase</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>可以看到先触发 box2 在触发 box1, 如果想要阻止 box1 事件，添加<code>stopPropagation</code>阻止事件传递</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">box2.addEventListener(</span><br><span class="line">  <span class="string">'click'</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    e.stopPropagation()</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'click box2'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  flase</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>这样就只执行了 box2 事件，相反也可以阻止 box2 事件只执行 box1</p><a id="more"></a><h3 id="事件冒泡和事件捕获"><a href="#事件冒泡和事件捕获" class="headerlink" title="事件冒泡和事件捕获"></a>事件冒泡和事件捕获</h3><p>当一个绑定事件的元素发生点击事件时会经过捕获、处理阶段、冒泡等过程。可以在绑定事件的时候设置</p><p><img src="https://mink.oss-cn-beijing.aliyuncs.com/blog/js-event.png" alt="事件机制"></p><p><strong>捕获</strong><br><code>addEventListener</code> 第三个参数为 true 时，表示这个事件会在捕获阶段触发</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ele.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;&#125;, <span class="literal">true</span>)</span><br></pre></td></tr></table></figure><p><strong>冒泡</strong><br>相反 <code>addEventListener</code> 第三个参数设置为 false 为冒泡事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ele.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;&#125;, <span class="literal">false</span>)</span><br></pre></td></tr></table></figure><p>两个事件都可以通过<code>stopPropagation</code>阻止传递下去</p><h3 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h3><p>管理站点文章后面都会有编辑等操作，这些操作大多都绑定着事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;list.length; i++) &#123;</span><br><span class="line">  list[i].addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;, <span class="literal">false</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>像这样我们为每个元素都绑定了事件，当数量大时会影响性能，正确的做法是通过事件委托</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Ele.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (e.target &amp;&amp; e.target.className.toUpperCase() == <span class="string">'BOX2'</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, <span class="literal">false</span>)</span><br></pre></td></tr></table></figure><p>把事件绑定到父节点后通过冒泡机制判断子元素点击事件，这样不用绑定多个，只需要绑定父节点就可以了</p>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 事件 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>栈的括号匹配</title>
      <link href="/2018/08/27/ds-stack/"/>
      <url>/2018/08/27/ds-stack/</url>
      <content type="html"><![CDATA[<h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><p>栈是一种后进先出的队列(LIFO)， 是一种存储数据的容器.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.list = []</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getSize() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.list.length</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  isEmpty() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.getSize() === <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  push(e) &#123;</span><br><span class="line">    <span class="keyword">this</span>.list.push(e)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  pop() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.list.pop()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  top() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.getSize() === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.list[<span class="keyword">this</span>.getSize() - <span class="number">1</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">;(<span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> list = <span class="keyword">new</span> Stack()</span><br><span class="line">  list.push(<span class="number">3</span>)</span><br><span class="line">  list.push(<span class="number">5</span>)</span><br><span class="line">  list.push(<span class="number">1</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`栈顶元素为: <span class="subst">$&#123;list.top()&#125;</span>`</span>)</span><br><span class="line">  list.pop()</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`栈顶元素为: <span class="subst">$&#123;list.top()&#125;</span>`</span>)</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="栈的括号匹配"><a href="#栈的括号匹配" class="headerlink" title="栈的括号匹配"></a>栈的括号匹配</h3><p>通过栈的后进先出， 来实现括号匹配， 如果遇到开号则压入栈中， 遇到闭号弹出栈顶元素匹配， 匹配成功则打印， 失败则报错</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> match = <span class="function"><span class="params">text</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> open_handle = [<span class="string">'('</span>, <span class="string">'&#123;'</span>, <span class="string">'['</span>]</span><br><span class="line">  <span class="keyword">let</span> handle_pair = &#123;</span><br><span class="line">    <span class="string">')'</span>: <span class="string">'('</span>,</span><br><span class="line">    <span class="string">'&#125;'</span>: <span class="string">'&#123;'</span>,</span><br><span class="line">    <span class="string">']'</span>: <span class="string">'['</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> list = <span class="keyword">new</span> Stack()</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; text.length; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> s = text[i]</span><br><span class="line">    <span class="keyword">if</span> (open_handle.indexOf(s) &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">      list.push(s)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">Object</span>.keys(handle_pair).indexOf(s) &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (list.pop() != handle_pair[s]) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;s&#125;</span> 和 <span class="subst">$&#123;handle_pair[s]&#125;</span> 不匹配`</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;s&#125;</span> 和 <span class="subst">$&#123;handle_pair[s]&#125;</span> 匹配`</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">;(<span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> text = <span class="string">"nihao (lklkl I'm sdfsd&#123; haha &#125;)f"</span></span><br><span class="line">  match(text)</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><h4 id="中缀表达式转后缀表达式"><a href="#中缀表达式转后缀表达式" class="headerlink" title="中缀表达式转后缀表达式"></a>中缀表达式转后缀表达式</h4><p>原理：从左遍历中缀表达式, 遇到操作数打印，遇到操作符， 判断栈顶操作符优先级是否大于等于当前操作符<br>是 弹出栈顶， 当前操作符压入栈中<br>否 压入栈顶<br>遇到（ 压入栈中， 如果 ）出现， 则循环弹出栈顶操作符直到与 ( 匹配。<br>计算后缀表达式：从左到右遍历后缀表达式，遇到操作数放进栈，遇到操作符，栈顶两个数出栈进行运算，运算结果放进栈，直到读完后缀表达式。<br>这里还需要处理表达式中双位数， 比如: 17 。 因为遍历字符会把它当做 1, 7。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> priority = &#123;</span><br><span class="line">  <span class="string">'('</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="string">'+'</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="string">'-'</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="string">'*'</span>: <span class="number">3</span>,</span><br><span class="line">  <span class="string">'/'</span>: <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">match</span>(<span class="params">text</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> op = <span class="string">'+-*/()'</span></span><br><span class="line">  <span class="keyword">let</span> stack = <span class="keyword">new</span> Stack()</span><br><span class="line"></span><br><span class="line">  <span class="comment">//循环字符串</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; text.length; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> s = text[i]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!op.includes(s)) &#123;</span><br><span class="line">      <span class="comment">// 操作数， 打印出来</span></span><br><span class="line">      <span class="built_in">console</span>.log(s)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (stack.top() === <span class="literal">null</span> || s === <span class="string">'('</span>) &#123;</span><br><span class="line">      <span class="comment">// 操作符， 入栈</span></span><br><span class="line">      stack.push(s)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s === <span class="string">')'</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> top = stack.top()</span><br><span class="line">      <span class="comment">// 一直循环到开阔号</span></span><br><span class="line">      <span class="keyword">while</span> (top != <span class="string">'('</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(top)</span><br><span class="line">        top = stack.pop()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (priority[stack.top()] &gt;= priority[s]) &#123;</span><br><span class="line">      <span class="comment">// 如果栈顶元素优先级大于当前操作符， 栈顶元素出栈， 操作符入栈</span></span><br><span class="line">      <span class="built_in">console</span>.log(stack.pop())</span><br><span class="line">      stack.push(s)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      stack.push(s)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">;(<span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> text = <span class="string">'(3 - 5) * (6 + 17 * 4) / 3'</span></span><br><span class="line">  match(text)</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>字符串匹配</title>
      <link href="/2018/08/27/ds-string-match/"/>
      <url>/2018/08/27/ds-string-match/</url>
      <content type="html"><![CDATA[<h3 id="朴素匹配算法"><a href="#朴素匹配算法" class="headerlink" title="朴素匹配算法"></a>朴素匹配算法</h3><p>朴素匹配算法是对目标字符串和模板字符串的一一匹配。如果匹配得上,下标向右移一位, 否则清空并重新开始匹配。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> match = <span class="function">(<span class="params">target, pattern</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> [i, j] = [<span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">  <span class="keyword">let</span> [n, m] = [target.length, pattern.length]</span><br><span class="line">  <span class="keyword">while</span> (i &lt; n &amp;&amp; j &lt; m) &#123;</span><br><span class="line">    <span class="keyword">if</span> (target[i] == pattern[j]) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(</span><br><span class="line">        <span class="string">`匹配的元素: target[<span class="subst">$&#123;i&#125;</span>]=<span class="subst">$&#123;target[i]&#125;</span>, pattern[<span class="subst">$&#123;j&#125;</span>]=<span class="subst">$&#123;pattern[j]&#125;</span>`</span></span><br><span class="line">      )</span><br><span class="line">      i += <span class="number">1</span></span><br><span class="line">      j += <span class="number">1</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(</span><br><span class="line">        <span class="string">`不匹配的元素: target[<span class="subst">$&#123;i&#125;</span>]=<span class="subst">$&#123;target[i]&#125;</span>, pattern[<span class="subst">$&#123;j&#125;</span>]=<span class="subst">$&#123;pattern[j]&#125;</span>`</span></span><br><span class="line">      )</span><br><span class="line">      i = i - j + <span class="number">1</span></span><br><span class="line">      j = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (j == m) &#123;</span><br><span class="line">    <span class="keyword">return</span> i - j</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br><span class="line">;(<span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> target = <span class="string">'abb abad abac'</span></span><br><span class="line">  <span class="keyword">let</span> pattern = <span class="string">'abac'</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'target'</span>, target)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'pattern'</span>, pattern)</span><br><span class="line">  match(target, pattern)</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="KMP-匹配算法"><a href="#KMP-匹配算法" class="headerlink" title="KMP 匹配算法"></a>KMP 匹配算法</h3><p>kmp 是通过已知匹配的字符进行移位的算法，位移数是通过已匹配的字符串的前缀和后缀元素集合中最长子元素长度。<a href="http://www.ruanyifeng.com/blog/2013/05/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm.html" target="_blank" rel="noopener">详解</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取模板字符串所有前缀子串</span></span><br><span class="line"><span class="comment"> * @param &#123;String&#125; pattern 模板字符串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> getPrefix = <span class="function"><span class="params">pattern</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> list = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; pattern.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> s = pattern.slice(<span class="number">0</span>, i + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> (s.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      list.push(s)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> list</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取模板字符串所有后缀子串</span></span><br><span class="line"><span class="comment"> * @param &#123;String&#125; pattern 模板字符串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> getSuffix = <span class="function"><span class="params">pattern</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> list = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; pattern.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> s = pattern.slice(i + <span class="number">1</span>, <span class="number">-1</span>)</span><br><span class="line">    <span class="keyword">if</span> (s.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      list.push(s)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> list</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取偏移量</span></span><br><span class="line"><span class="comment"> * @param &#123;String&#125; pattern</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> patternNext = <span class="function"><span class="params">pattern</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> prefix = getPrefix(pattern)</span><br><span class="line">  <span class="keyword">let</span> suffix = getSuffix(pattern)</span><br><span class="line">  <span class="keyword">let</span> lst = prefix.filter(<span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> suffix.indexOf(v) &gt; <span class="number">-1</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">let</span> offset = <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; lst.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (offset &lt; lst[i].length) &#123;</span><br><span class="line">      offset = lst[i].length</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> offset</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * kmp 匹配算法</span></span><br><span class="line"><span class="comment"> * @param &#123;String&#125; target</span></span><br><span class="line"><span class="comment"> * @param &#123;String&#125; pattern</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> match = <span class="function">(<span class="params">target, pattern</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> [i, j] = [<span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">  <span class="keyword">let</span> [n, m] = [target.length, pattern.length]</span><br><span class="line">  <span class="keyword">while</span> (i &lt; n &amp;&amp; j &lt; m) &#123;</span><br><span class="line">    <span class="keyword">if</span> (target[i] === pattern[j]) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(</span><br><span class="line">        <span class="string">`匹配元素: target[<span class="subst">$&#123;i&#125;</span>]=<span class="subst">$&#123;target[i]&#125;</span>, pattern[<span class="subst">$&#123;j&#125;</span>]=<span class="subst">$&#123;pattern[j]&#125;</span>`</span></span><br><span class="line">      )</span><br><span class="line">      i += <span class="number">1</span></span><br><span class="line">      j += <span class="number">1</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> offset = j - patternNext(pattern.slice(<span class="number">0</span>, j))</span><br><span class="line">      <span class="built_in">console</span>.log(</span><br><span class="line">        <span class="string">`不匹配元素: target[<span class="subst">$&#123;i&#125;</span>]=<span class="subst">$&#123;target[i]&#125;</span>, pattern[<span class="subst">$&#123;j&#125;</span>]=<span class="subst">$&#123;pattern[j]&#125;</span>`</span></span><br><span class="line">      )</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`位移数: <span class="subst">$&#123;offset&#125;</span>`</span>)</span><br><span class="line">      i = i + offset</span><br><span class="line">      j = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (j == m) &#123;</span><br><span class="line">    <span class="keyword">return</span> i - j</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br><span class="line">;(<span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> target = <span class="string">'BBC ABCDAB ABCDABCDABDE'</span></span><br><span class="line">  <span class="keyword">let</span> pattern = <span class="string">'ABCDABD'</span></span><br><span class="line">  match(target, pattern)</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>链表</title>
      <link href="/2018/08/27/ds-list/"/>
      <url>/2018/08/27/ds-list/</url>
      <content type="html"><![CDATA[<h3 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(data, next = null) &#123;</span><br><span class="line">    <span class="keyword">this</span>.data = data</span><br><span class="line">    <span class="keyword">this</span>.next = next</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">List</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="comment">// 初始化</span></span><br><span class="line">    <span class="keyword">this</span>.head = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">this</span>.length = <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  isEmpty() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.length == <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getSize() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.length</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  append(e) &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">      从head开始以为循环到尾部, 追加新的节点</span></span><br><span class="line"><span class="comment">      如果创建pop函数也是一样</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.head === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.head = <span class="keyword">new</span> Node(e)</span><br><span class="line">      <span class="keyword">this</span>.length += <span class="number">1</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> head = <span class="keyword">this</span>.head</span><br><span class="line">      <span class="keyword">while</span> (head.next !== <span class="literal">null</span>) &#123;</span><br><span class="line">        head = head.next</span><br><span class="line">      &#125;</span><br><span class="line">      head.next = <span class="keyword">new</span> Node(e)</span><br><span class="line">      <span class="keyword">this</span>.length += <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  reverse() &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">      反转链表</span></span><br><span class="line"><span class="comment">      移动head指针，指向下个节点， 并把原来节点指向上一个节点</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">let</span> p = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">let</span> head = <span class="keyword">this</span>.head</span><br><span class="line">    <span class="keyword">while</span> (head !== <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="comment">// 把head赋值给q, 这里q和head都指向同一个Node</span></span><br><span class="line">      <span class="keyword">let</span> q = head</span><br><span class="line">      <span class="comment">// 然后head指向给了下一个节点</span></span><br><span class="line">      head = q.next</span><br><span class="line">      <span class="comment">// q指向上一个节点</span></span><br><span class="line">      q.next = p</span><br><span class="line">      <span class="comment">// 把当前节点指向为上一个节点</span></span><br><span class="line">      p = q</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.head = p</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  print() &#123;</span><br><span class="line">    <span class="keyword">let</span> idx = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> head = <span class="keyword">this</span>.head</span><br><span class="line">    <span class="keyword">while</span> (head !== <span class="literal">null</span>) &#123;</span><br><span class="line">      idx += <span class="number">1</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`idx <span class="subst">$&#123;idx&#125;</span>, data: <span class="subst">$&#123;head.data&#125;</span>`</span>)</span><br><span class="line">      head = head.next</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">;(<span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> list = <span class="keyword">new</span> List()</span><br><span class="line">  list.append(<span class="number">3</span>)</span><br><span class="line">  list.append(<span class="number">5</span>)</span><br><span class="line">  list.append(<span class="number">1</span>)</span><br><span class="line">  list.print()</span><br><span class="line">  list.reverse()</span><br><span class="line">  list.print()</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="双端链表"><a href="#双端链表" class="headerlink" title="双端链表"></a>双端链表</h3><p>双端链表: 一个节点可以查到它的前驱和后继</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(data, prev = null, next = null) &#123;</span><br><span class="line">    <span class="keyword">this</span>.data = data</span><br><span class="line">    <span class="keyword">this</span>.prev = prev</span><br><span class="line">    <span class="keyword">this</span>.next = next</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">List</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.head = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">this</span>.tail = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">this</span>.length = <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  isEmpty() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.length == <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getSize() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.length</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  push(e) &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 通过判断尾节点， 如果为空， head和tail指向一个新的节点</span></span><br><span class="line"><span class="comment">     * 如果不为空, 当前tail指向一个新的节点， 新的节点的prev指向当前节点, tail向后移位</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">let</span> node = <span class="keyword">new</span> Node(e)</span><br><span class="line">    <span class="keyword">let</span> tail = <span class="keyword">this</span>.tail</span><br><span class="line">    <span class="keyword">if</span> (tail !== <span class="literal">null</span>) &#123;</span><br><span class="line">      tail.next = node</span><br><span class="line">      node.prev = tail</span><br><span class="line">      <span class="keyword">this</span>.tail = node</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.head = <span class="keyword">this</span>.tail = node</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.length += <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  pop() &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过判断尾节点， 如果不为空， 并且有上一个节点， 那么当前tail节点的指向为空， 并把上一个节点设置为新的tail节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">let</span> tail = <span class="keyword">this</span>.tail</span><br><span class="line">    <span class="keyword">if</span> (tail !== <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.length -= <span class="number">1</span></span><br><span class="line">      <span class="keyword">let</span> prev = tail.prev</span><br><span class="line">      <span class="keyword">if</span> (prev !== <span class="literal">null</span>) &#123;</span><br><span class="line">        prev.next = <span class="literal">null</span></span><br><span class="line">        tail.prev = <span class="literal">null</span></span><br><span class="line">        <span class="keyword">this</span>.tail = prev</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.head = <span class="keyword">this</span>.tail = <span class="literal">null</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> tail</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  lpush(e) &#123;</span><br><span class="line">    <span class="keyword">let</span> node = <span class="keyword">new</span> Node(e)</span><br><span class="line">    <span class="keyword">let</span> head = <span class="keyword">this</span>.head</span><br><span class="line">    <span class="keyword">if</span> (head !== <span class="literal">null</span>) &#123;</span><br><span class="line">      head.prev = node</span><br><span class="line">      node.next = head</span><br><span class="line">      <span class="keyword">this</span>.head = node</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.head = <span class="keyword">this</span>.tail = node</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.length += <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  lpop() &#123;</span><br><span class="line">    <span class="keyword">let</span> head = <span class="keyword">this</span>.head</span><br><span class="line">    <span class="keyword">if</span> (head !== <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.length -= <span class="number">1</span></span><br><span class="line">      <span class="keyword">let</span> next = head.next</span><br><span class="line">      <span class="keyword">if</span> (next !== <span class="literal">null</span>) &#123;</span><br><span class="line">        head.next = <span class="literal">null</span></span><br><span class="line">        next.prev = <span class="literal">null</span></span><br><span class="line">        <span class="keyword">this</span>.head = next</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.head = <span class="keyword">this</span>.tail = <span class="literal">null</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> head</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  print() &#123;</span><br><span class="line">    <span class="keyword">let</span> idx = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> head = <span class="keyword">this</span>.head</span><br><span class="line">    <span class="keyword">while</span> (head !== <span class="literal">null</span>) &#123;</span><br><span class="line">      idx += <span class="number">1</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`idx <span class="subst">$&#123;idx&#125;</span>, data: <span class="subst">$&#123;head.data&#125;</span>`</span>)</span><br><span class="line">      head = head.next</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">;(<span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> list = <span class="keyword">new</span> List()</span><br><span class="line">  list.push(<span class="number">3</span>)</span><br><span class="line">  list.push(<span class="number">5</span>)</span><br><span class="line">  list.lpush(<span class="number">1</span>)</span><br><span class="line">  list.print()</span><br><span class="line">  list.pop()</span><br><span class="line">  list.print()</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>javascript 继承</title>
      <link href="/2018/08/24/js-inherit/"/>
      <url>/2018/08/24/js-inherit/</url>
      <content type="html"><![CDATA[<p>继承是面向对象中的重要部分，像 java、python 等语言都是用类来继承的，而 js 的继承是通过原型链来实现的。</p><h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><p>通过将 prototype 指向对象的实例，来实现继承</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.property = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SuperType.prototype.getSuperValue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.property</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.subproperty = <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继承 SuperType</span></span><br><span class="line">SubType.prototype = <span class="keyword">new</span> SuperType()</span><br><span class="line"></span><br><span class="line">SubType.prototype.getSubValue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.subproperty</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance = <span class="keyword">new</span> SubType()</span><br><span class="line"><span class="built_in">console</span>.log(instance.getSuperValue()) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><p>所有 SubType 的实例都会继承同一个引用类型的对象，因为对于所有的 SubType 实例来说继承都是同一个对象的 colors</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.colors = [<span class="string">"red"</span>, <span class="string">"blue"</span>, <span class="string">"green"</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SubType.prototype = <span class="keyword">new</span> SuperType()</span><br><span class="line"><span class="keyword">var</span> s1 = <span class="keyword">new</span> SubType()</span><br><span class="line">s1.colors.push(<span class="string">'black'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(s1) <span class="comment">// "red,blue,green,black"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s2 = <span class="keyword">new</span> SubType()</span><br><span class="line"><span class="built_in">console</span>.log(s2) <span class="comment">// "red,blue,green,black"</span></span><br></pre></td></tr></table></figure><h3 id="借用构造函数"><a href="#借用构造函数" class="headerlink" title="借用构造函数"></a>借用构造函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  SuperType.call(<span class="keyword">this</span>, <span class="string">'mink'</span>)</span><br><span class="line">  <span class="keyword">this</span>.age = <span class="number">29</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance = <span class="keyword">new</span> SubType()</span><br><span class="line"><span class="built_in">console</span>.log(instance.name, instance.age) <span class="comment">// mink 29</span></span><br></pre></td></tr></table></figure><h4 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h4><p>在超类原型中定义的方法，在子类中不可见</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SuperType.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  SuperType.call(<span class="keyword">this</span>, <span class="string">'mink'</span>)</span><br><span class="line">  <span class="keyword">this</span>.age = <span class="number">29</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance = <span class="keyword">new</span> SubType()</span><br><span class="line"><span class="built_in">console</span>.log(instance.name, instance.age) <span class="comment">// mink 29</span></span><br><span class="line">instance.sayName() <span class="comment">// error</span></span><br></pre></td></tr></table></figure><h3 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h3><p>将原型链和借用构造函数组合在一起的继承方式叫组合继承</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.colors = [<span class="string">'red'</span>, <span class="string">'blue'</span>, <span class="string">'green'</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SuperType.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  SuperType.call(<span class="keyword">this</span>, name)</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SubType.prototype = <span class="keyword">new</span> SuperType()</span><br><span class="line"></span><br><span class="line">SubType.prototype.sayAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.age)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s1 = <span class="keyword">new</span> SubType(<span class="string">'mink'</span>, <span class="number">29</span>)</span><br><span class="line">s1.colors.push(<span class="string">'black'</span>)</span><br><span class="line">s1.sayName()</span><br><span class="line">s1.sayAge()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s2 = <span class="keyword">new</span> SubType(<span class="string">'mink2'</span>, <span class="number">27</span>)</span><br><span class="line"><span class="built_in">console</span>.log(s2.colors)</span><br><span class="line">s2.sayName()</span><br><span class="line">s2.sayAge()</span><br></pre></td></tr></table></figure><h4 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h4><p>虽然组合继承解决了以上两个继承的问题，但是会调用两次构造方法</p><h3 id="原型式"><a href="#原型式" class="headerlink" title="原型式"></a>原型式</h3><p>基于原有对象创建一个新的对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">object</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  F.prototype = o</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> F()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="缺点-3"><a href="#缺点-3" class="headerlink" title="缺点"></a>缺点</h4><p>共享对象的引用类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  friends: [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 = object(person)</span><br><span class="line">p1.friends.push(<span class="string">'d'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(p1.friends) <span class="comment">// a, b, c, d</span></span><br></pre></td></tr></table></figure><h3 id="寄生式"><a href="#寄生式" class="headerlink" title="寄生式"></a>寄生式</h3><p>用于创建一个封装继承的对象，新的对象继承原有对象的属性和方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createAnother</span>(<span class="params">original</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> clone = object(original)</span><br><span class="line">  clone.sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hi'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> clone</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  name: <span class="string">'mink'</span>,</span><br><span class="line">  age: <span class="string">'27'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> another = createAnother(person)</span><br><span class="line">another.sayHi()</span><br></pre></td></tr></table></figure><h4 id="缺点-4"><a href="#缺点-4" class="headerlink" title="缺点"></a>缺点</h4><p>封装在函数内的方法无法重用</p><h3 id="寄生组合式"><a href="#寄生组合式" class="headerlink" title="寄生组合式"></a>寄生组合式</h3><p>超类中的属性通过构造的方式继承，而原型通过原型方式继承，解决了组合继承中超类构造两次的缺点</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inheritPrototype</span>(<span class="params">subtype, supertype</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> prototype = <span class="built_in">Object</span>.create(supertype.prototype)</span><br><span class="line">  prototype.constructor = subtype</span><br><span class="line">  subtype.prototype = prototype</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name</span><br><span class="line">  <span class="keyword">this</span>.colors = [<span class="string">'red'</span>, <span class="string">'blue'</span>, <span class="string">'green'</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SuperType.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  SuperType.call(<span class="keyword">this</span>, name)</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inheritPrototype(SubType, SuperType)</span><br><span class="line"></span><br><span class="line">SubType.prototype.sayAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.age)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>css float 浮动</title>
      <link href="/2018/08/17/css-float/"/>
      <url>/2018/08/17/css-float/</url>
      <content type="html"><![CDATA[<p>在网页布局中除了 position 属性以外最常用的就是 float 属性，使用 float 属性的元素会脱离标准文档流，并根据 float 属性进行左右浮动。</p><h3 id="使用-float-属性"><a href="#使用-float-属性" class="headerlink" title="使用 float 属性"></a>使用 float 属性</h3><p>多个 div 元素根据文档流会呈现层级结构</p><iframe scrolling="no" width="100%" height="250px" src="//jsfiddle.net/fy47djhg/embedded/html,css,result/dark" frameborder="0" allowfullscreen></iframe><p>当我们给 yellow 设置浮动属性以后，就脱离了文档流 red 填充原有 yellow 所占的位置</p><a id="more"></a><iframe scrolling="no" width="100%" height="250px" src="//jsfiddle.net/5puyk6Lh/embedded/html,css,result/dark" frameborder="0" allowfullscreen></iframe><p>当我们给 red 也设置浮动属性后，red 紧跟着 yellow</p><iframe scrolling="no" width="100%" height="250px" src="//jsfiddle.net/3r9mdtez/embedded/html,css,result/dark" frameborder="0" allowfullscreen></iframe><p>我们设置新的 gray 部分，并且设置为行级标签 span，也设置浮动属性</p><iframe scrolling="no" width="100%" height="250px" src="//jsfiddle.net/71ysften/embedded/html,css,result/dark" frameborder="0" allowfullscreen></iframe><p>可以看出当我们给 gray 设置浮动后，gray 变成了块级元素，而且 gray 也没有跟在 yellow 元素后面，因为上一个 red 是在标准流中所以 gray 保证自己的顶部与 red 元素底部对齐</p><h3 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h3><p>很多时候我们为子元素设置浮动后，发现父元素所占空间高度为空，这是因为浮动元素脱离文档流后不占空间所导致的，这时候需要清除浮动</p><p><strong>方法一</strong><br>使用<code>clear:both</code>属性清除浮动</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  ...浮动元素</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"clear:both"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>clear</code>属性只能影响自身，也就是清楚了 div 两边的浮动，缺点是需要多写一个 div 元素</p><p><strong>方法二</strong><br>父元素设置<code>overflow:auto</code>属性清除浮动</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"overflow: auto;"</span>&gt;</span></span><br><span class="line">  ...浮动元素</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>overflow</code>可以使用<code>auto</code>和<code>hidden</code>来清除浮动</p><p><strong>方法三</strong><br>通过<code>:after</code>伪元素来清除浮动</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">clear</span>: both;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>css 定位属性</title>
      <link href="/2018/08/10/css-position/"/>
      <url>/2018/08/10/css-position/</url>
      <content type="html"><![CDATA[<p>元素的 position 属性使元素在文档布局中进行定位。</p><h3 id="定位属性"><a href="#定位属性" class="headerlink" title="定位属性"></a>定位属性</h3><p>static 属性是 position 的默认属性，另外还有 relative, absolute, fixed, inherit。定义 position 属性以后可以通过 top, left, bottom, right 控制元素在文档中的位置</p><h4 id="static-默认定位"><a href="#static-默认定位" class="headerlink" title="static 默认定位"></a>static 默认定位</h4><p>static 属性是 posistion 的默认属性，元素出现在文档流中 top, left, bottom, right 属性无效</p><h4 id="relative-相对定位"><a href="#relative-相对定位" class="headerlink" title="relative 相对定位"></a>relative 相对定位</h4><p>relative 属性使元素相对自身进行定位， 元素不脱离文档流</p><a id="more"></a><iframe scrolling="no" width="100%" height="250px" src="//jsfiddle.net/3ao2fytj/embedded/html,css,result/dark" frameborder="0" allowfullscreen></iframe><p>这个例子中因为红色 div 虽然位置发生了变化，但是没有脱离文档流，因此黄色 div 不会去填补空位。</p><h4 id="absolute-绝对定位"><a href="#absolute-绝对定位" class="headerlink" title="absolute 绝对定位"></a>absolute 绝对定位</h4><p>absolute 根据 position 属性是 static 以外的第一个父节点进行定位，元素脱离文档流<br><iframe scrolling="no" width="100%" height="250px" src="//jsfiddle.net/08djsf2h/embedded/html,css,result/dark" frameborder="0" allowfullscreen></iframe></p><p>这个例子中因为红色 div 设置为 absolute 所以脱离了文档流，黄色 div 填补了空白的位置。如果 absolute 找不到定位父元素会一直往上找，直到根节点<br><iframe scrolling="no" width="100%" height="250px" src="//jsfiddle.net/vo86mb5h/embedded/html,css,result/dark" frameborder="0" allowfullscreen></iframe><br>我们给灰色 div 设置定位属性以后，红色 div 定位变化为相对灰色 div，而不是根节点</p><h4 id="fixed-固定定位"><a href="#fixed-固定定位" class="headerlink" title="fixed 固定定位"></a>fixed 固定定位</h4><p>fixed 定位是根据 body 进行定位，即使页面滚动，元素位置仍不变<br><iframe scrolling="no" width="100%" height="250px" src="//jsfiddle.net/mhd8r1pt/embedded/html,css,result/dark" frameborder="0" allowfullscreen></iframe></p><h3 id="定位点"><a href="#定位点" class="headerlink" title="定位点"></a>定位点</h3><p>left, top, right, bottom 属性会为定位元素(脱离文档流元素)设置定位点和偏移位置。</p><h4 id="左上角"><a href="#左上角" class="headerlink" title="左上角"></a>左上角</h4><p>默认情况下，定位元素位置为左上角， 等于设置了<code>left:0</code> 和 <code>top:0</code><br><iframe scrolling="no" width="100%" height="250px" src="//jsfiddle.net/gdkrjo63/embedded/html,css,result/dark" frameborder="0" allowfullscreen></iframe></p><h4 id="左下角"><a href="#左下角" class="headerlink" title="左下角"></a>左下角</h4><p>这里我们设置了定位元素的位置为左下角，位置向左偏移了 10px<br><iframe scrolling="no" width="100%" height="250px" src="//jsfiddle.net/sfck6rpd/embedded/html,css,result/dark" frameborder="0" allowfullscreen></iframe></p>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>HTTP 缓存机制</title>
      <link href="/2018/08/08/http-cache/"/>
      <url>/2018/08/08/http-cache/</url>
      <content type="html"><![CDATA[<p>HTTP 缓存机制通过重用已获取的资源，减少网络延迟和资源等待时间来提升 Web 性能。常见的 HTTP 缓存只能存储<code>GET</code>响应，缓存的关键主要包裹 request method 和 URI。</p><h3 id="缓存相关字段"><a href="#缓存相关字段" class="headerlink" title="缓存相关字段"></a>缓存相关字段</h3><p>HTTP中与缓存相关的头部信息</p><p><strong>通用头部字段</strong></p><table><thead><tr><th>字段</th><th>描述</th></tr></thead><tbody><tr><td>Cache-Contrl</td><td>控制缓存行为</td></tr><tr><td>Progma</td><td>http1.0，现代浏览器默认设置用于兼容</td></tr></tbody></table><p><strong>请求头部字段</strong></p><a id="more"></a><table><thead><tr><th>字段</th><th>描述</th></tr></thead><tbody><tr><td>If-Match</td><td>比较ETag是否一致</td></tr><tr><td>If-None-Match</td><td>比较ETag是否不一致</td></tr><tr><td>If-Modified-Since</td><td>比较资源最后更新时间是否一致</td></tr><tr><td>If-Unmodified-Since</td><td>比较资源最后更新时间是否不一致</td></tr></tbody></table><p><strong>响应头部字段</strong></p><table><thead><tr><th>字段</th><th>描述</th></tr></thead><tbody><tr><td>ETag</td><td>资源匹配信息</td></tr></tbody></table><p><strong>实体头部字段</strong></p><table><thead><tr><th>字段</th><th>描述</th></tr></thead><tbody><tr><td>Expires</td><td>实体过期时间</td></tr><tr><td>Last-Modified</td><td>资源最后一次修改时间</td></tr></tbody></table><h3 id="缓存策略"><a href="#缓存策略" class="headerlink" title="缓存策略"></a>缓存策略</h3><p>对缓存可以分为以下几种</p><ol><li>缓存存储策略</li><li>缓存过期策略</li><li>缓存对比策略</li></ol><h4 id="缓存存储策略"><a href="#缓存存储策略" class="headerlink" title="缓存存储策略"></a>缓存存储策略</h4><blockquote><p>这个策略决定 HTTP 响应内容是否缓存到客户端</p></blockquote><p>对于 Cache-Control 头里 Public, Private, no-cache, max-cache, no-store 都是用来指定响应内容是否可以被客户端缓存的。其中前四个都会缓存到客户端，只有 no-store 不会。(no-cache 缓存到客户端并立即失效)</p><p>设置 Cache-Control: Public 不一定从本地缓存中加载数据，因为客户端无法确定缓存是否有效，所以需要一套判断缓存有效性的策略</p><h4 id="缓存过期策略"><a href="#缓存过期策略" class="headerlink" title="缓存过期策略"></a>缓存过期策略</h4><blockquote><p>这个策略判断缓存是否过期，如果未过期可直接从本地缓存中加载数据</p></blockquote><p>通过头中的 Expires 指明的过期时间判断缓存数据是否有效， 如果超过这个时间客户端会重新发起请求。<br>不过当 Cache-Control 设置为 no-cache 和 max-age 时比较特殊，他们既包含缓存存储策略也包含缓存过期策略</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Cache-Control: Public/Private</span><br><span class="line">Expires: 当前客户端时间 + maxAge</span><br></pre></td></tr></table></figure><ol><li>Cache-Control 中指定的缓存过期策略优先级高于 Expires</li><li>缓存过期策略只是告诉客户端不能直接从本地读取了，需要在发起请求到服务器确认，并不等于本地缓存不能用了</li></ol><p>通常缓存过期时间是Cache-Control:max-age=N中的max-age的值N，对于不含这个属性的请求则会去查看是否包含Expires属性，通过比较Expires的值和头里面Date属性的值来判断是否缓存还有效。如果max-age和expires属性都没有，找找头里的Last-Modified信息。如果有，缓存的寿命就等于头里面Date的值减去Last-Modified的值除以10</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">缓存有效时间 = (Date - Last-Modifeid) / 10</span><br></pre></td></tr></table></figure><h4 id="缓存对比策略"><a href="#缓存对比策略" class="headerlink" title="缓存对比策略"></a>缓存对比策略</h4><blockquote><p>将客户端的数据标识发往服务器，服务器通过标识判断客户端缓存是否有效</p></blockquote><p>服务器通过客户端请求头中有没有带<code>If-Modified-Since</code>和<code>If-None-Match</code>，判断缓存是否有效，如果有效返回 304 告诉客户端继续使用本地缓存</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Cache-Control:max-age=0</span><br><span class="line">Connection:keep-alive</span><br><span class="line">Host:cangmean.me</span><br><span class="line">If-Modified-Since:Wed, 08 Aug 2018 12:24:05 GMT</span><br></pre></td></tr></table></figure><p>这里标识 Cache-Control: max-age=0 会立即发送请求到服务器，请求头中携带的 If-Modified-Since 经过服务器判断缓存是有效的，返回 304 继续使用本地缓存</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Request URL:http://cangmean.me/</span><br><span class="line">Request Method:GET</span><br><span class="line">Status Code:304 Not Modified</span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="http://louiszhai.github.io/2017/04/07/http-cache/" target="_blank" rel="noopener">浏览器缓存机制剖析</a></li><li><a href="http://imweb.io/topic/5795dcb6fb312541492eda8c" target="_blank" rel="noopener">IMWeb</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzA3NTYzODYzMg==&mid=2653578381&idx=1&sn=3f676e2b2e08bcff831c69d31cf51c51&key=dde62796d24517c892043e67f2520e046c13fc0558822ef7ba7fbe8003ddde05e22230fb4ccb2c31133df2a507940c5d4561c7b4f4570969a47cf1388ff57e4bfea70a3810f3fc805e2a5d9aa3192439&ascene=0&uin=MTM4MjU5NzA0MA%3D%3D&devicetype=iMac+MacBookPro12%2C1+OSX+OSX+10.11.6+build(15G1212)&version=12010110&nettype=WIFI&fontScale=100&pass_ticket=n3plsW%2FV7Vb6O9hKzPNig5MYpXUoJo3tNUNxhJ5Jh6e9AS%2BRXmvJPbIzUeUmL3S2" target="_blank" rel="noopener">腾讯 Bugly</a></li></ul>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> http </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>css 外边距合并</title>
      <link href="/2018/08/07/css-margin-collapse/"/>
      <url>/2018/08/07/css-margin-collapse/</url>
      <content type="html"><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>当两个块级元素的上外边距和下外边距发生合并为一个外边距，取值为其中的最大值，这是情况叫<strong>外边距合并</strong>或<strong>margin 崩塌 折叠</strong></p><h3 id="什么时候发生崩塌"><a href="#什么时候发生崩塌" class="headerlink" title="什么时候发生崩塌"></a>什么时候发生崩塌</h3><blockquote><p>相邻的两个节点的外边距会合并</p></blockquote><a id="more"></a><p>下面例子中两个相邻的元素的外边距发生合并<br><iframe scrolling="no" width="100%" height="250px" src="//jsfiddle.net/yqvbgs32/embedded/html,css,result/dark" frameborder="0" allowfullscreen></iframe></p><blockquote><p>父元素与其第一个或最后一个子元素之间</p></blockquote><p>下面例子中子元素的 margin 溢出并覆盖了父元素的 margin<br><iframe scrolling="no" width="100%" height="250px" src="//jsfiddle.net/91p8y6zh/embedded/html,css,result/dark" frameborder="0" allowfullscreen></iframe></p><blockquote><p>空的块级元素</p></blockquote><p>可以通过盒模型查看，空的元素发生合并<br><iframe scrolling="no" width="100%" height="250px" src="//jsfiddle.net/Lxpgvw7t/embedded/html,css,result/dark" frameborder="0" allowfullscreen></iframe></p><h3 id="解决崩塌"><a href="#解决崩塌" class="headerlink" title="解决崩塌"></a>解决崩塌</h3><ul><li>浮动元素不会和任何元素发生折叠。</li><li>创建 BFC 元素不会和他的子元素发生折叠。</li><li>绝对定位元素不会和其他元素发生折叠。</li><li>inline-block 元素不会和其他元素发生折叠。</li></ul><h4 id="浮动元素解决崩塌"><a href="#浮动元素解决崩塌" class="headerlink" title="浮动元素解决崩塌"></a>浮动元素解决崩塌</h4><p>设置浮动元素可以避免 margin 崩塌，元素之间的间隔重新变为 30px<br><iframe scrolling="no" width="100%" height="250px" src="//jsfiddle.net/k5fu7dvx/embedded/html,css,result/dark" frameborder="0" allowfullscreen></iframe></p><h4 id="创建-BFC"><a href="#创建-BFC" class="headerlink" title="创建 BFC"></a>创建 BFC</h4><p>BFC(块格式化上下文)是布局过程中生成块级盒子的区域，也是浮动元素与其他元素的交互限定区域。</p><p><strong>以下方法创建 BFC</strong></p><ul><li>根元素或包含根元素的元素</li><li>浮动元素(float 不是 none)</li><li>绝对定位元素(position 为 absolut 和 fixed)</li><li>display 属性为 inline-block 和与 table 相关的一系列属性</li><li>overflow 不为 visible</li></ul><p>创建了块格式化上下文的元素中的所有内容都会被包含到该 BFC 中。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Box_Model/Mastering_margin_collapsing" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Box_Model/Mastering_margin_collapsing</a></li><li><a href="https://segmentfault.com/a/1190000010346113" target="_blank" rel="noopener">https://segmentfault.com/a/1190000010346113</a></li></ul>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>css 盒模型</title>
      <link href="/2018/08/07/css-box-model/"/>
      <url>/2018/08/07/css-box-model/</url>
      <content type="html"><![CDATA[<h3 id="CSS-盒模型"><a href="#CSS-盒模型" class="headerlink" title="CSS 盒模型"></a>CSS 盒模型</h3><p>css 中使用盒模型来描述元素所占空间的内容。分别是内容区域、内边框、边框、外边框。以下是盒模型图：</p><p><img src="https://mink.oss-cn-beijing.aliyuncs.com/blog/box-model.svg" alt="CSS盒模型"></p><a id="more"></a><ul><li><strong>内容区域</strong> 包含真是的元素内容。包括文字图片，一般情况下设置 width，height 改变的就是这个区域.</li><li><strong>内边框</strong> 内边框是内容区域和边框之间的部分， <code>padding</code>来改变周围的所占空间.</li><li><strong>边框</strong> 可以通过<code>border</code>属性来改变</li><li><strong>外边框</strong> 外边框是边框以外的部分，以分开相邻部分元素，可以通过<code>margin</code>属性来设置</li></ul><h3 id="box-sizing"><a href="#box-sizing" class="headerlink" title="box-sizing"></a>box-sizing</h3><p>默认情况下，我们为某一个元素设定宽高，是设置 content-box 区域的内容，当我们设置 margin 和 padding 的时候元素所占空间会变大</p><iframe scrolling="no" width="100%" height="250px" src="//jsfiddle.net/y412gb63/embedded/html,css,result/dark" frameborder="0" allowfullscreen></iframe><p>例子中设置了 margin 和 padding 后，黄色区域的宽度变为 110px，加上左边的外间距，实际所占空间为 120px。我们可以通过 box-sizing 属性指定 width 和 height 控制的区域包含边框和内边框</p><iframe scrolling="no" width="100%" height="250px" src="//jsfiddle.net/kw3y89ts/embedded/html,css,result/dark" frameborder="0" allowfullscreen></iframe><p>元素设置<code>box-sizing: border-box</code>后，元素所占区域变为 110px，而元素的 content-box 从原来的 100px 变为 90px</p>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>css 结构和层叠</title>
      <link href="/2018/08/07/css-specificity/"/>
      <url>/2018/08/07/css-specificity/</url>
      <content type="html"><![CDATA[<h3 id="特殊性值"><a href="#特殊性值" class="headerlink" title="特殊性值"></a>特殊性值</h3><p>CSS 可以对一个元素使用两个或多个规则, 每个规则都有自己的选择器. 例如:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123; <span class="attribute">color</span>: red; &#125;</span><br><span class="line"><span class="selector-tag">body</span> <span class="selector-tag">h1</span> &#123; <span class="attribute">color</span>: green; &#125;</span><br></pre></td></tr></table></figure><p>h1 对应着两个规则， 但是只有一个规则生效， 通过 css 特殊性值来计算</p><table><thead><tr><th>选择器</th><th>特殊性值</th></tr></thead><tbody><tr><td>包含ID</td><td>0, 1, 0, 0</td></tr><tr><td>包含类,属性, 伪类</td><td>0, 0, 1, 0</td></tr><tr><td>包含元素和为元素</td><td>0, 0, 0, 1</td></tr><tr><td>内联样式</td><td>1, 0, 0, 0</td></tr></tbody></table><p>上一个规则的特殊性值为<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123; <span class="attribute">color</span>: red; &#125; <span class="comment">/* 0, 0, 0, 1*/</span></span><br><span class="line"><span class="selector-tag">body</span> <span class="selector-tag">h1</span> &#123; <span class="attribute">color</span>: green; &#125; <span class="comment">/* 0, 0, 0, 2*/</span></span><br></pre></td></tr></table></figure></p><p>所以h1的字体颜色显示为绿色</p><a id="more"></a><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>如果没有对元素指定规则， 元素会继承至父元素的规则</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123; <span class="attribute">color</span>: blue; &#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello <span class="tag">&lt;<span class="name">em</span>&gt;</span>World<span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们对h1设置了颜色为蓝的规则后， em元素的字体也变成了蓝色</p><h4 id="继承和特殊性优先级"><a href="#继承和特殊性优先级" class="headerlink" title="继承和特殊性优先级"></a>继承和特殊性优先级</h4><p>继承来的元素是没有特殊性的，所以优先级低于设置特殊性值的元素(即使特殊性值为0)</p><iframe scrolling="no" width="100%" height="250px" src="//jsfiddle.net/uwnLyx3h/embedded/html,css,result/dark" frameborder="0" allowfullscreen></iframe><h3 id="层叠"><a href="#层叠" class="headerlink" title="层叠"></a>层叠</h3><p>当元素具有多个相同特殊性值的规则时， 后设置的规则会覆盖之前的规则</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123; <span class="attribute">color</span>: red; &#125;</span><br><span class="line"><span class="selector-tag">h1</span> &#123; <span class="attribute">color</span>: blue; &#125;</span><br></pre></td></tr></table></figure><p>h1 显示颜色为蓝</p><h4 id="重要声明"><a href="#重要声明" class="headerlink" title="重要声明"></a>重要声明</h4><p>当设置<code>important</code>声明时， 规则的权重是最高的</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123; <span class="attribute">color</span>: red <span class="meta">!important</span>; &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>css 选择器</title>
      <link href="/2018/08/03/css-selector/"/>
      <url>/2018/08/03/css-selector/</url>
      <content type="html"><![CDATA[<p>css 通过选择器精确定位 HTML 元素。我们可以通过 css 选择器改变 HTML 的样式.<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>div</code>是一个选择器， 紧跟着 css 的声明块， 其中 <code>background-color</code>表示属性， <code>red</code>表示属性的值.</p><a id="more"></a><h3 id="选择器类型"><a href="#选择器类型" class="headerlink" title="选择器类型"></a>选择器类型</h3><p>选择器分为一下几个类别:</p><table><thead><tr><th>选择器</th><th>描述</th></tr></thead><tbody><tr><td>简单选择器</td><td>通过元素类型， <code>class</code>或<code>id</code>匹配元素</td></tr><tr><td>属性选择器</td><td>通过元素属性/属性值匹配元素</td></tr><tr><td>伪类</td><td>匹配处于确定状态的一个或多个元素，比如被鼠标指针悬停的元素</td></tr><tr><td>伪元素</td><td>匹配处于相关的确定位置的一个或多个元素，例如每个段落的第一个字</td></tr><tr><td>组合器</td><td>组合多个选择器</td></tr><tr><td>多重选择器</td><td>将以逗号分隔开的多个选择器放在一个CSS规则下面</td></tr></tbody></table><h4 id="元素选择器"><a href="#元素选择器" class="headerlink" title="元素选择器"></a>元素选择器</h4><p>元素选择器通过HTML元素， 来改变节点样式<br><iframe scrolling="no" width="100%" height="250px" src="//jsfiddle.net/ko058hLu/embedded/html,css,result/dark" frameborder="0" allowfullscreen></iframe></p><h4 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h4><p>类选择器不考虑具体的元素， 而是通过HTML中指定的class来选择节点. 类选择器通过<code>.&lt;类名&gt;</code> 表示<br><iframe scrolling="no" width="100%" height="250px" src="//jsfiddle.net/1nvumLdh/embedded/html,css,result/dark" frameborder="0" allowfullscreen></iframe></p><h4 id="ID选择器"><a href="#ID选择器" class="headerlink" title="ID选择器"></a>ID选择器</h4><p>ID选择器跟类选择器类似， 不过节点中ID值不能有重复<br><iframe scrolling="no" width="100%" height="250px" src="//jsfiddle.net/cefxsnw2/embedded/html,css,result/dark" frameborder="0" allowfullscreen></iframe></p><h3 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h3><p>属性选择器类似类选择器和ID选择器, 他可以根据属性和属性值来选择元素<br><iframe scrolling="no" width="100%" height="250px" src="//jsfiddle.net/tjfo7y3L/embedded/html,css,result/dark" frameborder="0" allowfullscreen></iframe><br>这个例子把所有包含class属性的节点字体改为蓝色</p><h4 id="根据具体属性值来选择"><a href="#根据具体属性值来选择" class="headerlink" title="根据具体属性值来选择"></a>根据具体属性值来选择</h4><p>属性选择器还可以通过具体属性值来选择元素<br><iframe scrolling="no" width="100%" height="250px" src="//jsfiddle.net/ed4v2gwt/embedded/html,css,result/dark" frameborder="0" allowfullscreen></iframe></p><h4 id="根据部分属性值来选择"><a href="#根据部分属性值来选择" class="headerlink" title="根据部分属性值来选择"></a>根据部分属性值来选择</h4><p>选择属性值中的一部分<br><iframe scrolling="no" width="100%" height="250px" src="//jsfiddle.net/uryakp3n/embedded/html,css,result/dark" frameborder="0" allowfullscreen></iframe></p><h4 id="子串属性选择器"><a href="#子串属性选择器" class="headerlink" title="子串属性选择器"></a>子串属性选择器</h4><table><thead><tr><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>[foot^=”bar”]</td><td>选择属性值foo属性值以”bar”开头的所有属性</td></tr><tr><td>[foot$=”bar”]</td><td>选择属性值foo属性值以”bar”结尾的所有属性</td></tr><tr><td>[foot*=”bar”]</td><td>选择属性值foo属性值中包含”bar”的所有属性</td></tr></tbody></table><h3 id="伪类"><a href="#伪类" class="headerlink" title="伪类"></a>伪类</h3><p>伪类通过html元素的状态来选择， 以下是常用的伪类</p><table><thead><tr><th>伪类名</th><th>描述</th></tr></thead><tbody><tr><td>:link</td><td>指向作为未访问地址</td></tr><tr><td>:visited</td><td>指向作为已访问地址</td></tr><tr><td>:focus</td><td>指示当前用户输入焦点</td></tr><tr><td>:hover</td><td>鼠标指针停留在元素节点上</td></tr><tr><td>:active</td><td>用户鼠标点击元素</td></tr></tbody></table><p>伪类通常作用在链接和输入框中， 来动态改变元素的样式<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span> &#123;<span class="attribute">color</span>: navy;&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;<span class="attribute">color</span>: gray;&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;<span class="attribute">color</span>:red;&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;<span class="attribute">color</span>: yellow;&#125;</span><br></pre></td></tr></table></figure></p><h3 id="伪元素"><a href="#伪元素" class="headerlink" title="伪元素"></a>伪元素</h3><p>伪元素可以再文档中插入假想的元素, 从而得到某种效果<br><iframe scrolling="no" width="100%" height="250px" src="//jsfiddle.net/r5fq8xho/embedded/html,css,result/dark" frameborder="0" allowfullscreen></iframe></p><h3 id="组合器"><a href="#组合器" class="headerlink" title="组合器"></a>组合器</h3><p>可以组合多个选择器来选择节点</p><h4 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h4><p>后代选择器选择h1节点下的所有em元素</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> <span class="selector-tag">em</span> &#123; <span class="attribute">color</span>:gray;&#125;</span><br></pre></td></tr></table></figure><h4 id="子选择器"><a href="#子选择器" class="headerlink" title="子选择器"></a>子选择器</h4><p>子选择器选择直系后代中所有em元素<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &gt; <span class="selector-tag">em</span> &#123; <span class="attribute">color</span>: gray;&#125;</span><br></pre></td></tr></table></figure></p><h4 id="相邻选择器"><a href="#相邻选择器" class="headerlink" title="相邻选择器"></a>相邻选择器</h4><p>p是h1之后紧跟这的节点(h1和p共同的父元素)<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> + <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="兄弟选择器"><a href="#兄弟选择器" class="headerlink" title="兄弟选择器"></a>兄弟选择器</h4><p>p是h1之后的兄弟节点中的任意元素<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> ~ <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="多重选择器"><a href="#多重选择器" class="headerlink" title="多重选择器"></a>多重选择器</h3><p>将多个有相同规则的选择器以<code>,</code>组合在一起<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span>, <span class="selector-tag">h4</span>, <span class="selector-tag">h5</span>, <span class="selector-tag">h6</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: helvetica, <span class="string">'sans serif'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="参考-本文例子全部来至于MDN"><a href="#参考-本文例子全部来至于MDN" class="headerlink" title="参考 (本文例子全部来至于MDN)"></a>参考 (本文例子全部来至于MDN)</h3><ul><li>css权威指南</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Learn/CSS/Introduction_to_CSS/Selectors" target="_blank" rel="noopener">MDN</a></li></ul>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>mysql 常用命令</title>
      <link href="/2018/07/24/mysql-cmd/"/>
      <url>/2018/07/24/mysql-cmd/</url>
      <content type="html"><![CDATA[<p>因为项目中使用 orm， mysql 一些常用的命令都模糊了， 在此记录下 mysql 常用命令方便随时查看.</p><h3 id="库操作"><a href="#库操作" class="headerlink" title="库操作"></a>库操作</h3><p>对库的一些操作</p><h4 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create database `db_name` default character set utf8;</span><br></pre></td></tr></table></figure><h4 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop database `db_name`;</span><br></pre></td></tr></table></figure><h3 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h3><p>对表的一些操作</p><h4 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h4><p>创建一个<code>user</code>的数据表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `user` (</span><br><span class="line">    `id` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">    `username` varchar(50) DEFAULT &apos;&apos; COMMENT &apos;用户名&apos;,</span><br><span class="line">    `password` varchar(255) DEFAULT &apos;&apos; COMMENT &apos;密码&apos;,</span><br><span class="line">    PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="删除数据表"><a href="#删除数据表" class="headerlink" title="删除数据表"></a>删除数据表</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop table `user`;</span><br></pre></td></tr></table></figure><h4 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h4><p>插入一条数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into user(id, username, password) values(1, &apos;a&apos;, &apos;a123&apos;);</span><br></pre></td></tr></table></figure><p>如果表名后面写字段名， 相应的 values 也必须对应上， 如果没有写字段名， 默认为全部字段.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into user(username, password) values(&apos;a&apos;, &apos;a123&apos;);</span><br></pre></td></tr></table></figure><p>如果 values 后面写对组数据， 表示批量插入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into user values(1, &apos;a&apos;, &apos;a123&apos;), (2, &apos;b&apos;, &apos;b123&apos;);</span><br></pre></td></tr></table></figure><h4 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h4><p>查询一条数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">select</span><br><span class="line">    username</span><br><span class="line">from</span><br><span class="line">    user</span><br><span class="line">where</span><br><span class="line">    password like &apos;%12%&apos;</span><br><span class="line">order by</span><br><span class="line">    username desc;</span><br></pre></td></tr></table></figure><h4 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update user set usrename=&apos;c&apos; where id = 1;</span><br></pre></td></tr></table></figure><h4 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delete from user where id = 1;</span><br></pre></td></tr></table></figure><h4 id="添加字段"><a href="#添加字段" class="headerlink" title="添加字段"></a>添加字段</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table user add `age` int(11) after username;</span><br></pre></td></tr></table></figure><h4 id="修改字段"><a href="#修改字段" class="headerlink" title="修改字段"></a>修改字段</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table user change `age` `create_time` varchar(8);</span><br></pre></td></tr></table></figure><h4 id="修改字段类型"><a href="#修改字段类型" class="headerlink" title="修改字段类型"></a>修改字段类型</h4><p>只修改字段类型，不修改名称时可使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table user modify `age` varchar(2);</span><br></pre></td></tr></table></figure><h4 id="删除字段"><a href="#删除字段" class="headerlink" title="删除字段"></a>删除字段</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table user drop `age`;</span><br></pre></td></tr></table></figure><h4 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h4><p>创建普通索引, 注意<code>Null</code>值对索引无效， 还是会进行查询， 需要改成空字符串， 如果写入多个字段表示组合索引</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table `表名` add index `索引名称` (`字段`， `字段`);</span><br></pre></td></tr></table></figure><p>例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table user add index `idx_name` (`username`);</span><br></pre></td></tr></table></figure><p>创建唯一索引</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table user add unique `idx_name` (`username`);</span><br></pre></td></tr></table></figure><p>创建唯一组合索引</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table user add unique `idx_name` (`username`, `password`);</span><br></pre></td></tr></table></figure><h4 id="查看索引"><a href="#查看索引" class="headerlink" title="查看索引"></a>查看索引</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show index from `user`;</span><br></pre></td></tr></table></figure><h4 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table user drop index `idx_name`;</span><br></pre></td></tr></table></figure><h3 id="数据的导入导出"><a href="#数据的导入导出" class="headerlink" title="数据的导入导出"></a>数据的导入导出</h3><h4 id="导出操作"><a href="#导出操作" class="headerlink" title="导出操作"></a>导出操作</h4><p>导出数据库数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -u root -p `数据库名` &gt; db.sql</span><br></pre></td></tr></table></figure><p>导出数据库指定表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -u root -p `数据库名` `表名` &gt; db.sql</span><br></pre></td></tr></table></figure><p>导出所有数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -u root -p --all-databases &gt; all_db.sql</span><br></pre></td></tr></table></figure><h4 id="导入操作"><a href="#导入操作" class="headerlink" title="导入操作"></a>导入操作</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p &lt; db.sql</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vim zsh 增强命令行</title>
      <link href="/2018/07/17/vim-zsh/"/>
      <url>/2018/07/17/vim-zsh/</url>
      <content type="html"><![CDATA[<p>使用 vim 插件来增强终端下的编辑能力， 使用 zsh 替换 bash 提升自动补全</p><h3 id="安装-vim-和插件管理器-vundle"><a href="#安装-vim-和插件管理器-vundle" class="headerlink" title="安装 vim 和插件管理器 vundle"></a>安装 vim 和插件管理器 vundle</h3><p>vundle 包管理， 可以轻松的安装 vim 插件, 首先安装 vundle</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p ～/.vim/bundle/vundle</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/gmarik/vundle.git ~/.vim/bundle/vundle</span><br></pre></td></tr></table></figure><p>添加 vim 配置， 在用户主目录下创建<code>.vim</code>并编辑内容</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">set nocompatible</span><br><span class="line">filetype off</span><br><span class="line">set rtp+=~/.vim/bundle/vundle</span><br><span class="line"></span><br><span class="line">call vundle#begin()</span><br><span class="line"></span><br><span class="line">Plugin &apos;scrooloose/nerdtree&apos;</span><br><span class="line">Plugin &apos;majutsushi/tagbar&apos;</span><br><span class="line">Plugin &apos;bling/vim-airline&apos;</span><br><span class="line">Plugin &apos;mattn/emmet-vim&apos;</span><br><span class="line">Plugin &apos;easymotion/vim-easymotion&apos;</span><br><span class="line">Plugin &apos;tmhedberg/SimpylFold&apos;</span><br><span class="line">Plugin &apos;vim-scripts/indentpython.vim&apos;</span><br><span class="line">Plugin &apos;scrooloose/syntastic&apos;</span><br><span class="line">Plugin &apos;nvie/vim-flake8&apos;</span><br><span class="line">Plugin &apos;tomasr/molokai&apos;</span><br><span class="line">Plugin &apos;kien/ctrlp.vim&apos;</span><br><span class="line">Plugin &apos;Valloric/YouCompleteMe&apos;</span><br><span class="line"></span><br><span class="line">call vundle#end()</span><br><span class="line">filetype plugin indent on</span><br><span class="line"></span><br><span class="line">syntax enable</span><br><span class="line">syntax on</span><br><span class="line">colorscheme molokai</span><br><span class="line">let g:molokai_original = 1</span><br><span class="line"></span><br><span class="line">&quot; setting nerdtree</span><br><span class="line">&quot; ignore files in NERDTree</span><br><span class="line">let NERDTreeIgnore=[&apos;\.pyc$&apos;, &apos;\~$&apos;]</span><br><span class="line">map &lt;F2&gt; :NERDTreeToggle&lt;CR&gt;</span><br><span class="line">autocmd bufenter * if (winnr(&quot;$&quot;) == 1 &amp;&amp; exists(&quot;b:NERDTreeType&quot;) &amp;&amp; b:NERDTreeType == &quot;primary&quot;) | q | endif</span><br><span class="line"></span><br><span class="line">&quot; setting tagbar</span><br><span class="line">nmap &lt;F4&gt; : TagbarToggle&lt;CR&gt;</span><br><span class="line">let g:tagbar_width=30</span><br><span class="line"></span><br><span class="line">&quot; execute python</span><br><span class="line">&quot;map &lt;F5&gt; :w&lt;CR&gt;:!python %&lt;CR&gt;</span><br><span class="line"></span><br><span class="line">&quot; setting ariline</span><br><span class="line">let g:airline_powerline_fonts = 1</span><br><span class="line">let g:airline#extensions#tabline#enabled = 1</span><br><span class="line">let g:airline#extensions#tabline#left_sep = &apos; &apos;</span><br><span class="line">let g:airline#extensions#tabline#left_alt_sep = &apos;|&apos;</span><br><span class="line"></span><br><span class="line">&quot; emmet</span><br><span class="line">let g:user_emmet_expandabbr_key=&apos;&lt;c-e&gt;&apos;</span><br><span class="line">let g:user_emmet_settings=&#123;&apos;indentation&apos;:&apos;    &apos;&#125;</span><br><span class="line"></span><br><span class="line">&quot; easymotion</span><br><span class="line">map f &lt;Plug&gt;(easymotion-prefix)</span><br><span class="line">map ff &lt;Plug&gt;(easymotion-s)</span><br><span class="line">map fs &lt;Plug&gt;(easymotion-f)</span><br><span class="line">map fl &lt;Plug&gt;(easymotion-lineforward)</span><br><span class="line">map fj &lt;Plug&gt;(easymotion-j)</span><br><span class="line">map fk &lt;Plug&gt;(easymotion-k)</span><br><span class="line">map fh &lt;Plug&gt;(easymotion-linebackward)</span><br><span class="line">let g:EasyMotion_smartcase = 1</span><br><span class="line"></span><br><span class="line">&quot; simpylfold</span><br><span class="line">let g:SimpylFold_docstring_preview=1</span><br><span class="line"></span><br><span class="line">&quot; syntastic</span><br><span class="line">let python_highlight_all=1</span><br><span class="line"></span><br><span class="line">set nu</span><br><span class="line">set encoding=utf-8</span><br><span class="line">set fileencoding=utf-8</span><br><span class="line">set tabstop=4</span><br><span class="line">set expandtab</span><br><span class="line">set softtabstop=4</span><br><span class="line">set shiftwidth=4</span><br><span class="line">set autoindent</span><br><span class="line">set fileformat=unix</span><br><span class="line"></span><br><span class="line">&quot;split navigations</span><br><span class="line">nnoremap &lt;C-J&gt; &lt;C-W&gt;&lt;C-J&gt;</span><br><span class="line">nnoremap &lt;C-K&gt; &lt;C-W&gt;&lt;C-K&gt;</span><br><span class="line">nnoremap &lt;C-L&gt; &lt;C-W&gt;&lt;C-L&gt;</span><br><span class="line">nnoremap &lt;C-H&gt; &lt;C-W&gt;&lt;C-H&gt;</span><br><span class="line"></span><br><span class="line">&quot;enable folding</span><br><span class="line">set foldmethod=indent</span><br><span class="line">set foldlevel=99</span><br><span class="line"></span><br><span class="line">&quot;enable folding with the spacebar</span><br><span class="line">nnoremap &lt;space&gt; za</span><br></pre></td></tr></table></figure><p>然后输入<code>vim</code>命令进入命令行模式后， 输入安装命令. 这里的输入的命令是根据<code>.vimrc</code>中插件前缀设定的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PluginInstall</span><br></pre></td></tr></table></figure><h3 id="安装-zsh-和-oh-my-zsh"><a href="#安装-zsh-和-oh-my-zsh" class="headerlink" title="安装 zsh 和 oh-my-zsh"></a>安装 zsh 和 oh-my-zsh</h3><p>zsh 可以通过 yum 来安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install zsh</span><br></pre></td></tr></table></figure><p>使用 wget 下载安装脚本， 并执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh</span><br></pre></td></tr></table></figure><p>切换 zsh</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chsh -s /usr/bin/zsh</span><br></pre></td></tr></table></figure><p>可以编辑主目录下<code>.zshrc</code>文件来管理主题</p>]]></content>
      
      
        <tags>
            
            <tag> vim </tag>
            
            <tag> zsh </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>docker 安装与配置</title>
      <link href="/2018/07/16/docker-config/"/>
      <url>/2018/07/16/docker-config/</url>
      <content type="html"><![CDATA[<h3 id="安装-docker"><a href="#安装-docker" class="headerlink" title="安装 docker"></a>安装 docker</h3><p>使用官方的配置脚本， 在 centos 上安装 docker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL get.docker.com -o get-docker.sh</span><br><span class="line">sh get-docker.sh --mirror Aliyun</span><br></pre></td></tr></table></figure><h3 id="启动-docker"><a href="#启动-docker" class="headerlink" title="启动 docker"></a>启动 docker</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> docker</span><br><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure><h3 id="测试-docker"><a href="#测试-docker" class="headerlink" title="测试 docker"></a>测试 docker</h3><p>通过下载镜像来测试 docker 是否正常运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure><h3 id="加速-docker"><a href="#加速-docker" class="headerlink" title="加速 docker"></a>加速 docker</h3><p>因为网络原因国内下载 docker 镜像会非常缓慢， 可以通过配置阿里云镜像加速 docker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-<span class="string">'EOF'</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"registry-mirrors"</span>: [<span class="string">"https://xxxxx.mirror.aliyuncs.com"</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><p>可以通过<code>docker info</code>命令查看镜像源是否换成了国内的</p>]]></content>
      
      <categories>
          
          <category> 后端 </category>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>基于Token认证的公共Api接口设计</title>
      <link href="/2018/07/13/api-token/"/>
      <url>/2018/07/13/api-token/</url>
      <content type="html"><![CDATA[<p>公共 API 通过设计 token 和 sign 等方法，保证接口安全.</p><h3 id="基于-token"><a href="#基于-token" class="headerlink" title="基于 token"></a>基于 token</h3><p>客户端通过服务器设置的规则访问特定 url 获取 token</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">http://host/api/v1/token?app_id=xxx&amp;app_secret=xxx</span><br><span class="line"># 也可以通过post方法获取</span><br><span class="line">&#123;</span><br><span class="line">    &quot;app_id&quot;: xxx,</span><br><span class="line">    &quot;app_secret&quot;: xxx,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 服务端返回值</span><br><span class="line">&#123;</span><br><span class="line">    &quot;access_token&quot;: &quot;kkIs5V9uTri6&quot;,</span><br><span class="line">    &quot;expires_in&quot;: 7200</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后访问别的 API 接口可以通过参数上传 access_token 来保证访问</p><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://host/users/1?access_token=kkIs5V9uTri6</span><br></pre></td></tr></table></figure><h3 id="基于-sign-和-token-timestamp"><a href="#基于-sign-和-token-timestamp" class="headerlink" title="基于 sign 和 token, timestamp"></a>基于 sign 和 token, timestamp</h3><p>使用 sign 加密上传参数来保证数据的一致性, 而通过 timestamp 与服务器当前时间戳比较防止恶意调用接口.</p><h4 id="sign-签名算法"><a href="#sign-签名算法" class="headerlink" title="sign 签名算法"></a>sign 签名算法</h4><p>生成加密算法用于调用接口</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 按一定的顺序, 规则加密, 全部大写或全部小写</span></span><br><span class="line">text = <span class="string">"timestamp=xxx&amp;key=value&amp;token=xxxx"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里全部小写了, 这样就生成了签名</span></span><br><span class="line">sign = md5(text.lower())</span><br></pre></td></tr></table></figure><h4 id="调用接口"><a href="#调用接口" class="headerlink" title="调用接口"></a>调用接口</h4><p>加密后调用 api 接口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 调用更新用户信息的接口</span><br><span class="line">http://host/users/1/update</span><br><span class="line"></span><br><span class="line"># 上传数据</span><br><span class="line">&#123;</span><br><span class="line">    &quot;token&quot;: xxx,</span><br><span class="line">    &quot;timestamp&quot;: xxx,</span><br><span class="line">    &quot;sign&quot;: xxx,</span><br><span class="line">    # 以下是具体更新的数据</span><br><span class="line">    &quot;name&quot; xxx,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="服务器鉴定"><a href="#服务器鉴定" class="headerlink" title="服务器鉴定"></a>服务器鉴定</h4><p>获取客户端的请求数据, 服务器开始鉴定</p><ol><li>判断是否包含参数 token, timestamp, sign</li><li>判断参数中的时间戳的服务器的时间戳间隔(超过 10 分钟失效, 这个时间用户自己设置)</li><li>判断 token 是否过期</li><li>服务器通过相同的签名算法加密后与客户端 sign 作比较</li></ol><p>经过一下判断来确定当前请求是否有效, 如果全部通过就可以返回数据了</p>]]></content>
      
      
        <tags>
            
            <tag> api </tag>
            
            <tag> token </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>基于docker的mysql主从配置</title>
      <link href="/2018/07/13/mysql-master/"/>
      <url>/2018/07/13/mysql-master/</url>
      <content type="html"><![CDATA[<h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><p>备份数据, 主库挂了从库依然可以访问</p><h3 id="使用-docker-生成镜像"><a href="#使用-docker-生成镜像" class="headerlink" title="使用 docker 生成镜像"></a>使用 docker 生成镜像</h3><p>本文默认为已安装 docker 环境, ubuntu 环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">在本机上安装mysql5.7版本</span><br><span class="line">sudo docker pull mysql:5.7</span><br><span class="line"></span><br><span class="line"><span class="comment"># code 在code目录下创建mysql/master和mysql/slave目录</span></span><br><span class="line">mkdir -p mysql/&#123;master,slave&#125;</span><br></pre></td></tr></table></figure><p>然后在 master 和 slave 目录中写入配置文件<code>Dockerfile</code>和<code>my.cnf</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># master/Dockerfile和slave/Dockerfile</span><br><span class="line">FROM mysql:5.7</span><br><span class="line">COPY my.cnf /etc/mysql/</span><br><span class="line">EXPOSE 3306</span><br><span class="line">CMD [&quot;mysqld&quot;]</span><br><span class="line"></span><br><span class="line"># master/my.cnf， 主库和从库的server-id不能相同</span><br><span class="line">[mysqld]</span><br><span class="line">log-bin=mysql-bin</span><br><span class="line">server-id=1</span><br><span class="line"></span><br><span class="line"># slave/my.cnf</span><br><span class="line">log-bin=mysql-bin</span><br><span class="line">server-id=2</span><br></pre></td></tr></table></figure><p>分别在目录中执行以下命令生成镜像</p><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># master, . 表示当前目录</span></span><br><span class="line">sudo docker build -t master/mysql .</span><br><span class="line"></span><br><span class="line"><span class="comment"># slave</span></span><br><span class="line">sudo docker build -t slave/mysql .</span><br></pre></td></tr></table></figure><h3 id="创建并配置容器"><a href="#创建并配置容器" class="headerlink" title="创建并配置容器"></a>创建并配置容器</h3><p>创建容器初始化数据库密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run -p 3307:3306 --name mysql-master -e MYSQL_ROOT_PASSWORD=654321 -d master/mysql</span><br><span class="line">sudo docker run -p 3308:3306 --name mysql-slave -e MYSQL_ROOT_PASSWORD=654321 -d slave/mysql</span><br></pre></td></tr></table></figure><p>可以通过<code>sudo docker ps 查询</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                     NAMES</span><br><span class="line">b69cb0f6d536        slave/mysql         &quot;docker-entrypoint.s…&quot;   2 hours ago         Up 2 hours          0.0.0.0:3308-&gt;3306/tcp   mysql-slave</span><br><span class="line">310f9101ef10        master/mysql        &quot;docker-entrypoint.s…&quot;   2 hours ago         Up 2 hours          0.0.0.0:3307-&gt;3306/tcp   mysql-master</span><br></pre></td></tr></table></figure><p>写一个查询容器<code>IP地址</code>的 sh, 把内容复制到.bashrc 中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function docker_ip()&#123;</span><br><span class="line">  sudo docker inspect --format &apos;&#123;&#123; .NetworkSettings.IPAddress &#125;&#125;&apos; $1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看两个容器服务的<code>IP地址</code>, 连接数据库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询地址</span></span><br><span class="line">docker_ip mysql-master  <span class="comment"># 172.17.0.2</span></span><br><span class="line">docker_ip mysql-slave   <span class="comment"># 172.17.0.3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接数据库</span></span><br><span class="line">mysql -u root -h 172.17.0.2 -p</span><br><span class="line">mysql -u root -h 172.17.0.3 -p</span><br></pre></td></tr></table></figure><p>在主库上进行配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 设置user用户并设置所有host可以访问, 访问密码654321</span><br><span class="line">GRANT SELECT, REPLICATION SLAVE ON *.* to &apos;user&apos;@&apos;%&apos; identified by &apos;654321&apos;;</span><br><span class="line"></span><br><span class="line"># 查看容器状态</span><br><span class="line">show master status</span><br><span class="line"></span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">| mysql-bin.000003 |     1028 |              |                  |                   |</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br></pre></td></tr></table></figure><p>在从库上进行配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">change master to</span><br><span class="line">master_host=&apos;172.17.0.2&apos;, # 连接的master IP地址</span><br><span class="line">master_user=&apos;user&apos;,</span><br><span class="line">master_log_file=&apos;mysql-bin.000003&apos;,</span><br><span class="line">master_log_pos=1028,</span><br><span class="line">master_port=3306,</span><br><span class="line">master_password=&apos;654321&apos;;</span><br><span class="line"></span><br><span class="line"># 执行命令并查看连接状态</span><br><span class="line">mysql &gt; start slave;</span><br><span class="line">mysql &gt; show slave status\G;</span><br><span class="line"></span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State: Waiting for master to send event</span><br><span class="line">                  Master_Host: 172.17.0.2</span><br><span class="line">                  Master_User: user</span><br><span class="line">                  Master_Port: 3306</span><br><span class="line">                Connect_Retry: 60</span><br><span class="line">              Master_Log_File: mysql-bin.000003</span><br><span class="line">          Read_Master_Log_Pos: 1028</span><br><span class="line">               Relay_Log_File: b69cb0f6d536-relay-bin.000002</span><br><span class="line">                Relay_Log_Pos: 503</span><br><span class="line">        Relay_Master_Log_File: mysql-bin.000003</span><br><span class="line">             Slave_IO_Running: Yes</span><br><span class="line">            Slave_SQL_Running: Yes</span><br><span class="line">              Replicate_Do_DB:</span><br><span class="line">          Replicate_Ignore_DB:</span><br><span class="line">           Replicate_Do_Table:</span><br><span class="line">       Replicate_Ignore_Table:</span><br><span class="line">      Replicate_Wild_Do_Table:</span><br><span class="line">  Replicate_Wild_Ignore_Table:</span><br><span class="line">                   Last_Errno: 0</span><br><span class="line">                   Last_Error:</span><br><span class="line">                 Skip_Counter: 0</span><br><span class="line">          Exec_Master_Log_Pos: 1028</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"># 如果配置错误执行stop slave后重新配置</span><br><span class="line">mysql &gt; stop slave;</span><br><span class="line">mysql &gt; 配置...</span><br><span class="line">mysql &gt; start slave;</span><br></pre></td></tr></table></figure><p><code>Slave_IO_Running</code>和<code>Slave_SQL_Running</code>必须是 Yes, 如果是 No 和 Connecting 表示连接失败</p><p>失败原因可能有:</p><ol><li>连接 master 的 IP 地址有误</li><li>配置密码错误</li><li>mysql_log_pos 有误</li></ol><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>在主库创建一个数据库, 在从库上查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 主库</span><br><span class="line">create database abc default character set utf8;</span><br><span class="line"></span><br><span class="line"># 从库</span><br><span class="line">mysql&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| abc                |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| sys                |</span><br><span class="line">+--------------------+</span><br></pre></td></tr></table></figure><h3 id="参考地址"><a href="#参考地址" class="headerlink" title="参考地址"></a>参考地址</h3><ul><li><a href="https://laravel-china.org/articles/6631/using-docker-to-complete-master-slave-configuration-of-mysql-database" target="_blank" rel="noopener">https://laravel-china.org/articles/6631/using-docker-to-complete-master-slave-configuration-of-mysql-database</a></li><li><a href="https://www.jianshu.com/p/0439206e1f28" target="_blank" rel="noopener">https://www.jianshu.com/p/0439206e1f28</a></li></ul>]]></content>
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
