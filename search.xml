<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>css 定位属性</title>
      <link href="/2018/08/10/css-position/"/>
      <url>/2018/08/10/css-position/</url>
      <content type="html"><![CDATA[<p>元素的 position 属性使元素在文档布局中进行定位。</p><h3 id="定位属性"><a href="#定位属性" class="headerlink" title="定位属性"></a>定位属性</h3><p>static 属性是 position 的默认属性，另外还有 relative, absolute, fixed, inherit。定义 position 属性以后可以通过 top, left, bottom, right 控制元素在文档中的位置</p><h4 id="static-默认定位"><a href="#static-默认定位" class="headerlink" title="static 默认定位"></a>static 默认定位</h4><p>static 属性是 posistion 的默认属性，元素出现在文档流中 top, left, bottom, right 属性无效</p><h4 id="relative-相对定位"><a href="#relative-相对定位" class="headerlink" title="relative 相对定位"></a>relative 相对定位</h4><p>relative 属性使元素相对自身进行定位， 元素不脱离文档流</p><iframe scrolling="no" width="100%" height="250px" src="//jsfiddle.net/3ao2fytj/embedded/html,css,result/dark" frameborder="0" allowfullscreen></iframe><p>这个例子中因为红色 div 虽然位置发生了变化，但是没有脱离文档流，因此黄色 div 不会去填补空位。</p><h4 id="absolute-绝对定位"><a href="#absolute-绝对定位" class="headerlink" title="absolute 绝对定位"></a>absolute 绝对定位</h4><p>absolute 根据 position 属性是 static 以外的第一个父节点进行定位，元素脱离文档流<br><iframe scrolling="no" width="100%" height="250px" src="//jsfiddle.net/08djsf2h/embedded/html,css,result/dark" frameborder="0" allowfullscreen></iframe></p><p>这个例子中因为红色 div 设置为 absolute 所以脱离了文档流，黄色 div 填补了空白的位置。如果 absolute 找不到定位父元素会一直往上找，直到根节点<br><iframe scrolling="no" width="100%" height="250px" src="//jsfiddle.net/vo86mb5h/embedded/html,css,result/dark" frameborder="0" allowfullscreen></iframe><br>我们给灰色 div 设置定位属性以后，红色 div 定位变化为相对灰色 div，而不是根节点</p><h4 id="fixed-固定定位"><a href="#fixed-固定定位" class="headerlink" title="fixed 固定定位"></a>fixed 固定定位</h4><p>fixed 定位是根据 body 进行定位，即使页面滚动，元素位置仍不变<br><iframe scrolling="no" width="100%" height="250px" src="//jsfiddle.net/mhd8r1pt/embedded/html,css,result/dark" frameborder="0" allowfullscreen></iframe></p><h3 id="定位点"><a href="#定位点" class="headerlink" title="定位点"></a>定位点</h3><p>left, top, right, bottom 属性会为定位元素(脱离文档流元素)设置定位点和偏移位置。</p><h4 id="左上角"><a href="#左上角" class="headerlink" title="左上角"></a>左上角</h4><p>默认情况下，定位元素位置为左上角， 等于设置了<code>left:0</code> 和 <code>top:0</code><br><iframe scrolling="no" width="100%" height="250px" src="//jsfiddle.net/gdkrjo63/embedded/html,css,result/dark" frameborder="0" allowfullscreen></iframe></p><h4 id="左下角"><a href="#左下角" class="headerlink" title="左下角"></a>左下角</h4><p>这里我们设置了定位元素的位置为左下角，位置向左偏移了 10px<br><iframe scrolling="no" width="100%" height="250px" src="//jsfiddle.net/sfck6rpd/embedded/html,css,result/dark" frameborder="0" allowfullscreen></iframe></p>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>HTTP 缓存机制</title>
      <link href="/2018/08/08/http-cache/"/>
      <url>/2018/08/08/http-cache/</url>
      <content type="html"><![CDATA[<p>HTTP 缓存机制通过重用已获取的资源，减少网络延迟和资源等待时间来提升 Web 性能。常见的 HTTP 缓存只能存储<code>GET</code>响应，缓存的关键主要包裹 request method 和 URI。</p><h3 id="缓存相关字段"><a href="#缓存相关字段" class="headerlink" title="缓存相关字段"></a>缓存相关字段</h3><p>HTTP中与缓存相关的头部信息</p><p><strong>通用头部字段</strong></p><table><thead><tr><th>字段</th><th>描述</th></tr></thead><tbody><tr><td>Cache-Contrl</td><td>控制缓存行为</td></tr><tr><td>Progma</td><td>http1.0，现代浏览器默认设置用于兼容</td></tr></tbody></table><p><strong>请求头部字段</strong></p><a id="more"></a><table><thead><tr><th>字段</th><th>描述</th></tr></thead><tbody><tr><td>If-Match</td><td>比较ETag是否一致</td></tr><tr><td>If-None-Match</td><td>比较ETag是否不一致</td></tr><tr><td>If-Modified-Since</td><td>比较资源最后更新时间是否一致</td></tr><tr><td>If-Unmodified-Since</td><td>比较资源最后更新时间是否不一致</td></tr></tbody></table><p><strong>响应头部字段</strong></p><table><thead><tr><th>字段</th><th>描述</th></tr></thead><tbody><tr><td>ETag</td><td>资源匹配信息</td></tr></tbody></table><p><strong>实体头部字段</strong></p><table><thead><tr><th>字段</th><th>描述</th></tr></thead><tbody><tr><td>Expires</td><td>实体过期时间</td></tr><tr><td>Last-Modified</td><td>资源最后一次修改时间</td></tr></tbody></table><h3 id="缓存策略"><a href="#缓存策略" class="headerlink" title="缓存策略"></a>缓存策略</h3><p>对缓存可以分为以下几种</p><ol><li>缓存存储策略</li><li>缓存过期策略</li><li>缓存对比策略</li></ol><h4 id="缓存存储策略"><a href="#缓存存储策略" class="headerlink" title="缓存存储策略"></a>缓存存储策略</h4><blockquote><p>这个策略决定 HTTP 响应内容是否缓存到客户端</p></blockquote><p>对于 Cache-Control 头里 Public, Private, no-cache, max-cache, no-store 都是用来指定响应内容是否可以被客户端缓存的。其中前四个都会缓存到客户端，只有 no-store 不会。(no-cache 缓存到客户端并立即失效)</p><p>设置 Cache-Control: Public 不一定从本地缓存中加载数据，因为客户端无法确定缓存是否有效，所以需要一套判断缓存有效性的策略</p><h4 id="缓存过期策略"><a href="#缓存过期策略" class="headerlink" title="缓存过期策略"></a>缓存过期策略</h4><blockquote><p>这个策略判断缓存是否过期，如果未过期可直接从本地缓存中加载数据</p></blockquote><p>通过头中的 Expires 指明的过期时间判断缓存数据是否有效， 如果超过这个时间客户端会重新发起请求。<br>不过当 Cache-Control 设置为 no-cache 和 max-age 时比较特殊，他们既包含缓存存储策略也包含缓存过期策略</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Cache-Control: Public/Private</span><br><span class="line">Expires: 当前客户端时间 + maxAge</span><br></pre></td></tr></table></figure><ol><li>Cache-Control 中指定的缓存过期策略优先级高于 Expires</li><li>缓存过期策略只是告诉客户端不能直接从本地读取了，需要在发起请求到服务器确认，并不等于本地缓存不能用了</li></ol><p>通常缓存过期时间是Cache-Control:max-age=N中的max-age的值N，对于不含这个属性的请求则会去查看是否包含Expires属性，通过比较Expires的值和头里面Date属性的值来判断是否缓存还有效。如果max-age和expires属性都没有，找找头里的Last-Modified信息。如果有，缓存的寿命就等于头里面Date的值减去Last-Modified的值除以10</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">缓存有效时间 = (Date - Last-Modifeid) / 10</span><br></pre></td></tr></table></figure><h4 id="缓存对比策略"><a href="#缓存对比策略" class="headerlink" title="缓存对比策略"></a>缓存对比策略</h4><blockquote><p>将客户端的数据标识发往服务器，服务器通过标识判断客户端缓存是否有效</p></blockquote><p>服务器通过客户端请求头中有没有带<code>If-Modified-Since</code>和<code>If-None-Match</code>，判断缓存是否有效，如果有效返回 304 告诉客户端继续使用本地缓存</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Cache-Control:max-age=0</span><br><span class="line">Connection:keep-alive</span><br><span class="line">Host:cangmean.me</span><br><span class="line">If-Modified-Since:Wed, 08 Aug 2018 12:24:05 GMT</span><br></pre></td></tr></table></figure><p>这里标识 Cache-Control: max-age=0 会立即发送请求到服务器，请求头中携带的 If-Modified-Since 经过服务器判断缓存是有效的，返回 304 继续使用本地缓存</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Request URL:http://cangmean.me/</span><br><span class="line">Request Method:GET</span><br><span class="line">Status Code:304 Not Modified</span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="http://louiszhai.github.io/2017/04/07/http-cache/" target="_blank" rel="noopener">浏览器缓存机制剖析</a></li><li><a href="http://imweb.io/topic/5795dcb6fb312541492eda8c" target="_blank" rel="noopener">IMWeb</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzA3NTYzODYzMg==&mid=2653578381&idx=1&sn=3f676e2b2e08bcff831c69d31cf51c51&key=dde62796d24517c892043e67f2520e046c13fc0558822ef7ba7fbe8003ddde05e22230fb4ccb2c31133df2a507940c5d4561c7b4f4570969a47cf1388ff57e4bfea70a3810f3fc805e2a5d9aa3192439&ascene=0&uin=MTM4MjU5NzA0MA%3D%3D&devicetype=iMac+MacBookPro12%2C1+OSX+OSX+10.11.6+build(15G1212)&version=12010110&nettype=WIFI&fontScale=100&pass_ticket=n3plsW%2FV7Vb6O9hKzPNig5MYpXUoJo3tNUNxhJ5Jh6e9AS%2BRXmvJPbIzUeUmL3S2" target="_blank" rel="noopener">腾讯 Bugly</a></li></ul>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> http </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>css 外边距合并</title>
      <link href="/2018/08/07/css-margin-collapse/"/>
      <url>/2018/08/07/css-margin-collapse/</url>
      <content type="html"><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>当两个块级元素的上外边距和下外边距发生合并为一个外边距，取值为其中的最大值，这是情况叫<strong>外边距合并</strong>或<strong>margin 崩塌 折叠</strong></p><h3 id="什么时候发生崩塌"><a href="#什么时候发生崩塌" class="headerlink" title="什么时候发生崩塌"></a>什么时候发生崩塌</h3><blockquote><p>相邻的两个节点的外边距会合并</p></blockquote><a id="more"></a><p>下面例子中两个相邻的元素的外边距发生合并<br><iframe scrolling="no" width="100%" height="250px" src="//jsfiddle.net/yqvbgs32/embedded/html,css,result/dark" frameborder="0" allowfullscreen></iframe></p><blockquote><p>父元素与其第一个或最后一个子元素之间</p></blockquote><p>下面例子中子元素的 margin 溢出并覆盖了父元素的 margin<br><iframe scrolling="no" width="100%" height="250px" src="//jsfiddle.net/91p8y6zh/embedded/html,css,result/dark" frameborder="0" allowfullscreen></iframe></p><blockquote><p>空的块级元素</p></blockquote><p>可以通过盒模型查看，空的元素发生合并<br><iframe scrolling="no" width="100%" height="250px" src="//jsfiddle.net/Lxpgvw7t/embedded/html,css,result/dark" frameborder="0" allowfullscreen></iframe></p><h3 id="解决崩塌"><a href="#解决崩塌" class="headerlink" title="解决崩塌"></a>解决崩塌</h3><ul><li>浮动元素不会和任何元素发生折叠。</li><li>创建 BFC 元素不会和他的子元素发生折叠。</li><li>绝对定位元素不会和其他元素发生折叠。</li><li>inline-block 元素不会和其他元素发生折叠。</li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Box_Model/Mastering_margin_collapsing" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Box_Model/Mastering_margin_collapsing</a></li><li><a href="https://segmentfault.com/a/1190000010346113" target="_blank" rel="noopener">https://segmentfault.com/a/1190000010346113</a></li></ul>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>css 盒模型</title>
      <link href="/2018/08/07/css-box-model/"/>
      <url>/2018/08/07/css-box-model/</url>
      <content type="html"><![CDATA[<h3 id="CSS-盒模型"><a href="#CSS-盒模型" class="headerlink" title="CSS 盒模型"></a>CSS 盒模型</h3><p>css 中使用盒模型来描述元素所占空间的内容。分别是内容区域、内边框、边框、外边框。以下是盒模型图：</p><p><img src="https://mink.oss-cn-beijing.aliyuncs.com/blog/box-model.svg" alt="CSS盒模型"></p><a id="more"></a><ul><li><strong>内容区域</strong> 包含真是的元素内容。包括文字图片，一般情况下设置 width，height 改变的就是这个区域.</li><li><strong>内边框</strong> 内边框是内容区域和边框之间的部分， <code>padding</code>来改变周围的所占空间.</li><li><strong>边框</strong> 可以通过<code>border</code>属性来改变</li><li><strong>外边框</strong> 外边框是边框以外的部分，以分开相邻部分元素，可以通过<code>margin</code>属性来设置</li></ul><h3 id="box-sizing"><a href="#box-sizing" class="headerlink" title="box-sizing"></a>box-sizing</h3><p>默认情况下，我们为某一个元素设定宽高，是设置 content-box 区域的内容，当我们设置 margin 和 padding 的时候元素所占空间会变大</p><iframe scrolling="no" width="100%" height="250px" src="//jsfiddle.net/y412gb63/embedded/html,css,result/dark" frameborder="0" allowfullscreen></iframe><p>例子中设置了 margin 和 padding 后，黄色区域的宽度变为 110px，加上左边的外间距，实际所占空间为 120px。我们可以通过 box-sizing 属性指定 width 和 height 控制的区域包含边框和内边框</p><iframe scrolling="no" width="100%" height="250px" src="//jsfiddle.net/kw3y89ts/embedded/html,css,result/dark" frameborder="0" allowfullscreen></iframe><p>元素设置<code>box-sizing: border-box</code>后，元素所占区域变为 110px，而元素的 content-box 从原来的 100px 变为 90px</p>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>css 结构和层叠</title>
      <link href="/2018/08/07/css-specificity/"/>
      <url>/2018/08/07/css-specificity/</url>
      <content type="html"><![CDATA[<h3 id="特殊性值"><a href="#特殊性值" class="headerlink" title="特殊性值"></a>特殊性值</h3><p>CSS 可以对一个元素使用两个或多个规则, 每个规则都有自己的选择器. 例如:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123; <span class="attribute">color</span>: red; &#125;</span><br><span class="line"><span class="selector-tag">body</span> <span class="selector-tag">h1</span> &#123; <span class="attribute">color</span>: green; &#125;</span><br></pre></td></tr></table></figure><p>h1 对应着两个规则， 但是只有一个规则生效， 通过 css 特殊性值来计算</p><table><thead><tr><th>选择器</th><th>特殊性值</th></tr></thead><tbody><tr><td>包含ID</td><td>0, 1, 0, 0</td></tr><tr><td>包含类,属性, 伪类</td><td>0, 0, 1, 0</td></tr><tr><td>包含元素和为元素</td><td>0, 0, 0, 1</td></tr><tr><td>内联样式</td><td>1, 0, 0, 0</td></tr></tbody></table><p>上一个规则的特殊性值为<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123; <span class="attribute">color</span>: red; &#125; <span class="comment">/* 0, 0, 0, 1*/</span></span><br><span class="line"><span class="selector-tag">body</span> <span class="selector-tag">h1</span> &#123; <span class="attribute">color</span>: green; &#125; <span class="comment">/* 0, 0, 0, 2*/</span></span><br></pre></td></tr></table></figure></p><p>所以h1的字体颜色显示为绿色</p><a id="more"></a><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>如果没有对元素指定规则， 元素会继承至父元素的规则</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123; <span class="attribute">color</span>: blue; &#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello <span class="tag">&lt;<span class="name">em</span>&gt;</span>World<span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们对h1设置了颜色为蓝的规则后， em元素的字体也变成了蓝色</p><h4 id="继承和特殊性优先级"><a href="#继承和特殊性优先级" class="headerlink" title="继承和特殊性优先级"></a>继承和特殊性优先级</h4><p>继承来的元素是没有特殊性的，所以优先级低于设置特殊性值的元素(即使特殊性值为0)</p><iframe scrolling="no" width="100%" height="250px" src="//jsfiddle.net/uwnLyx3h/embedded/html,css,result/dark" frameborder="0" allowfullscreen></iframe><h3 id="层叠"><a href="#层叠" class="headerlink" title="层叠"></a>层叠</h3><p>当元素具有多个相同特殊性值的规则时， 后设置的规则会覆盖之前的规则</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123; <span class="attribute">color</span>: red; &#125;</span><br><span class="line"><span class="selector-tag">h1</span> &#123; <span class="attribute">color</span>: blue; &#125;</span><br></pre></td></tr></table></figure><p>h1 显示颜色为蓝</p><h4 id="重要声明"><a href="#重要声明" class="headerlink" title="重要声明"></a>重要声明</h4><p>当设置<code>important</code>声明时， 规则的权重是最高的</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123; <span class="attribute">color</span>: red <span class="meta">!important</span>; &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>css 选择器</title>
      <link href="/2018/08/03/css-selector/"/>
      <url>/2018/08/03/css-selector/</url>
      <content type="html"><![CDATA[<p>css 通过选择器精确定位 HTML 元素。我们可以通过 css 选择器改变 HTML 的样式.<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>div</code>是一个选择器， 紧跟着 css 的声明块， 其中 <code>background-color</code>表示属性， <code>red</code>表示属性的值.</p><a id="more"></a><h3 id="选择器类型"><a href="#选择器类型" class="headerlink" title="选择器类型"></a>选择器类型</h3><p>选择器分为一下几个类别:</p><table><thead><tr><th>选择器</th><th>描述</th></tr></thead><tbody><tr><td>简单选择器</td><td>通过元素类型， <code>class</code>或<code>id</code>匹配元素</td></tr><tr><td>属性选择器</td><td>通过元素属性/属性值匹配元素</td></tr><tr><td>伪类</td><td>匹配处于确定状态的一个或多个元素，比如被鼠标指针悬停的元素</td></tr><tr><td>伪元素</td><td>匹配处于相关的确定位置的一个或多个元素，例如每个段落的第一个字</td></tr><tr><td>组合器</td><td>组合多个选择器</td></tr><tr><td>多重选择器</td><td>将以逗号分隔开的多个选择器放在一个CSS规则下面</td></tr></tbody></table><h4 id="元素选择器"><a href="#元素选择器" class="headerlink" title="元素选择器"></a>元素选择器</h4><p>元素选择器通过HTML元素， 来改变节点样式<br><iframe scrolling="no" width="100%" height="250px" src="//jsfiddle.net/ko058hLu/embedded/html,css,result/dark" frameborder="0" allowfullscreen></iframe></p><h4 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h4><p>类选择器不考虑具体的元素， 而是通过HTML中指定的class来选择节点. 类选择器通过<code>.&lt;类名&gt;</code> 表示<br><iframe scrolling="no" width="100%" height="250px" src="//jsfiddle.net/1nvumLdh/embedded/html,css,result/dark" frameborder="0" allowfullscreen></iframe></p><h4 id="ID选择器"><a href="#ID选择器" class="headerlink" title="ID选择器"></a>ID选择器</h4><p>ID选择器跟类选择器类似， 不过节点中ID值不能有重复<br><iframe scrolling="no" width="100%" height="250px" src="//jsfiddle.net/cefxsnw2/embedded/html,css,result/dark" frameborder="0" allowfullscreen></iframe></p><h3 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h3><p>属性选择器类似类选择器和ID选择器, 他可以根据属性和属性值来选择元素<br><iframe scrolling="no" width="100%" height="250px" src="//jsfiddle.net/tjfo7y3L/embedded/html,css,result/dark" frameborder="0" allowfullscreen></iframe><br>这个例子把所有包含class属性的节点字体改为蓝色</p><h4 id="根据具体属性值来选择"><a href="#根据具体属性值来选择" class="headerlink" title="根据具体属性值来选择"></a>根据具体属性值来选择</h4><p>属性选择器还可以通过具体属性值来选择元素<br><iframe scrolling="no" width="100%" height="250px" src="//jsfiddle.net/ed4v2gwt/embedded/html,css,result/dark" frameborder="0" allowfullscreen></iframe></p><h4 id="根据部分属性值来选择"><a href="#根据部分属性值来选择" class="headerlink" title="根据部分属性值来选择"></a>根据部分属性值来选择</h4><p>选择属性值中的一部分<br><iframe scrolling="no" width="100%" height="250px" src="//jsfiddle.net/uryakp3n/embedded/html,css,result/dark" frameborder="0" allowfullscreen></iframe></p><h4 id="子串属性选择器"><a href="#子串属性选择器" class="headerlink" title="子串属性选择器"></a>子串属性选择器</h4><table><thead><tr><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>[foot^=”bar”]</td><td>选择属性值foo属性值以”bar”开头的所有属性</td></tr><tr><td>[foot$=”bar”]</td><td>选择属性值foo属性值以”bar”结尾的所有属性</td></tr><tr><td>[foot*=”bar”]</td><td>选择属性值foo属性值中包含”bar”的所有属性</td></tr></tbody></table><h3 id="伪类"><a href="#伪类" class="headerlink" title="伪类"></a>伪类</h3><p>伪类通过html元素的状态来选择， 以下是常用的伪类</p><table><thead><tr><th>伪类名</th><th>描述</th></tr></thead><tbody><tr><td>:link</td><td>指向作为未访问地址</td></tr><tr><td>:visited</td><td>指向作为已访问地址</td></tr><tr><td>:focus</td><td>指示当前用户输入焦点</td></tr><tr><td>:hover</td><td>鼠标指针停留在元素节点上</td></tr><tr><td>:active</td><td>用户鼠标点击元素</td></tr></tbody></table><p>伪类通常作用在链接和输入框中， 来动态改变元素的样式<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span> &#123;<span class="attribute">color</span>: navy;&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;<span class="attribute">color</span>: gray;&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;<span class="attribute">color</span>:red;&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;<span class="attribute">color</span>: yellow;&#125;</span><br></pre></td></tr></table></figure></p><h3 id="伪元素"><a href="#伪元素" class="headerlink" title="伪元素"></a>伪元素</h3><p>伪元素可以再文档中插入假想的元素, 从而得到某种效果<br><iframe scrolling="no" width="100%" height="250px" src="//jsfiddle.net/r5fq8xho/embedded/html,css,result/dark" frameborder="0" allowfullscreen></iframe></p><h3 id="组合器"><a href="#组合器" class="headerlink" title="组合器"></a>组合器</h3><p>可以组合多个选择器来选择节点</p><h4 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h4><p>后代选择器选择h1节点下的所有em元素</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> <span class="selector-tag">em</span> &#123; <span class="attribute">color</span>:gray;&#125;</span><br></pre></td></tr></table></figure><h4 id="子选择器"><a href="#子选择器" class="headerlink" title="子选择器"></a>子选择器</h4><p>子选择器选择直系后代中所有em元素<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &gt; <span class="selector-tag">em</span> &#123; <span class="attribute">color</span>: gray;&#125;</span><br></pre></td></tr></table></figure></p><h4 id="相邻选择器"><a href="#相邻选择器" class="headerlink" title="相邻选择器"></a>相邻选择器</h4><p>p是h1之后紧跟这的节点(h1和p共同的父元素)<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> + <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="兄弟选择器"><a href="#兄弟选择器" class="headerlink" title="兄弟选择器"></a>兄弟选择器</h4><p>p是h1之后的兄弟节点中的任意元素<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> ~ <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="多重选择器"><a href="#多重选择器" class="headerlink" title="多重选择器"></a>多重选择器</h3><p>将多个有相同规则的选择器以<code>,</code>组合在一起<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span>, <span class="selector-tag">h4</span>, <span class="selector-tag">h5</span>, <span class="selector-tag">h6</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: helvetica, <span class="string">'sans serif'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="参考-本文例子全部来至于MDN"><a href="#参考-本文例子全部来至于MDN" class="headerlink" title="参考 (本文例子全部来至于MDN)"></a>参考 (本文例子全部来至于MDN)</h3><ul><li>css权威指南</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Learn/CSS/Introduction_to_CSS/Selectors" target="_blank" rel="noopener">MDN</a></li></ul>]]></content>
      
      <categories>
          
          <category> 前端 </category>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>mysql 常用命令</title>
      <link href="/2018/07/24/mysql-command/"/>
      <url>/2018/07/24/mysql-command/</url>
      <content type="html"><![CDATA[<p>因为项目中使用 orm， mysql 一些常用的命令都模糊了， 在此记录下 mysql 常用命令方便随时查看.</p><h3 id="库操作"><a href="#库操作" class="headerlink" title="库操作"></a>库操作</h3><p>对库的一些操作</p><h4 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create database `db_name` default character set utf8;</span><br></pre></td></tr></table></figure><h4 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop database `db_name`;</span><br></pre></td></tr></table></figure><h3 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h3><p>对表的一些操作</p><h4 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h4><p>创建一个<code>user</code>的数据表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `user` (</span><br><span class="line">    `id` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">    `username` varchar(50) DEFAULT &apos;&apos; COMMENT &apos;用户名&apos;,</span><br><span class="line">    `password` varchar(255) DEFAULT &apos;&apos; COMMENT &apos;密码&apos;,</span><br><span class="line">    PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="删除数据表"><a href="#删除数据表" class="headerlink" title="删除数据表"></a>删除数据表</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop table `user`;</span><br></pre></td></tr></table></figure><h4 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h4><p>插入一条数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into user(id, username, password) values(1, &apos;a&apos;, &apos;a123&apos;);</span><br></pre></td></tr></table></figure><p>如果表名后面写字段名， 相应的 values 也必须对应上， 如果没有写字段名， 默认为全部字段.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into user(username, password) values(&apos;a&apos;, &apos;a123&apos;);</span><br></pre></td></tr></table></figure><p>如果 values 后面写对组数据， 表示批量插入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into user values(1, &apos;a&apos;, &apos;a123&apos;), (2, &apos;b&apos;, &apos;b123&apos;);</span><br></pre></td></tr></table></figure><h4 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h4><p>查询一条数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">select</span><br><span class="line">    username</span><br><span class="line">from</span><br><span class="line">    user</span><br><span class="line">where</span><br><span class="line">    password like &apos;%12%&apos;</span><br><span class="line">order by</span><br><span class="line">    username desc;</span><br></pre></td></tr></table></figure><h4 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update user set usrename=&apos;c&apos; where id = 1;</span><br></pre></td></tr></table></figure><h4 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delete from user where id = 1;</span><br></pre></td></tr></table></figure><h4 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h4><p>创建普通索引, 注意<code>Null</code>值对索引无效， 还是会进行查询， 需要改成空字符串， 如果写入多个字段表示组合索引</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table `表名` add index `索引名称` (`字段`， `字段`);</span><br></pre></td></tr></table></figure><p>例:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table user add index `idx_name` (`username`);</span><br></pre></td></tr></table></figure><p>创建唯一索引</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table user add unique `idx_name` (`username`);</span><br></pre></td></tr></table></figure><p>创建唯一组合索引</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table user add unique `idx_name` (`username`, `password`);</span><br></pre></td></tr></table></figure><h4 id="查看索引"><a href="#查看索引" class="headerlink" title="查看索引"></a>查看索引</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show index from `user`;</span><br></pre></td></tr></table></figure><h4 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table user drop index `idx_name`;</span><br></pre></td></tr></table></figure><h3 id="数据的导入导出"><a href="#数据的导入导出" class="headerlink" title="数据的导入导出"></a>数据的导入导出</h3><h4 id="导出操作"><a href="#导出操作" class="headerlink" title="导出操作"></a>导出操作</h4><p>导出数据库数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -u root -p `数据库名` &gt; db.sql</span><br></pre></td></tr></table></figure><p>导出数据库指定表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -u root -p `数据库名` `表名` &gt; db.sql</span><br></pre></td></tr></table></figure><p>导出所有数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -u root -p --all-databases &gt; all_db.sql</span><br></pre></td></tr></table></figure><h4 id="导入操作"><a href="#导入操作" class="headerlink" title="导入操作"></a>导入操作</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p &lt; db.sql</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vim zsh 增强命令行</title>
      <link href="/2018/07/17/vim-zsh/"/>
      <url>/2018/07/17/vim-zsh/</url>
      <content type="html"><![CDATA[<p>使用 vim 插件来增强终端下的编辑能力， 使用 zsh 替换 bash 提升自动补全</p><h3 id="安装-vim-和插件管理器-vundle"><a href="#安装-vim-和插件管理器-vundle" class="headerlink" title="安装 vim 和插件管理器 vundle"></a>安装 vim 和插件管理器 vundle</h3><p>vundle 包管理， 可以轻松的安装 vim 插件, 首先安装 vundle</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p ～/.vim/bundle/vundle</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/gmarik/vundle.git ~/.vim/bundle/vundle</span><br></pre></td></tr></table></figure><p>添加 vim 配置， 在用户主目录下创建<code>.vim</code>并编辑内容</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">set nocompatible</span><br><span class="line">filetype off</span><br><span class="line">set rtp+=~/.vim/bundle/vundle</span><br><span class="line"></span><br><span class="line">call vundle#begin()</span><br><span class="line"></span><br><span class="line">Plugin &apos;scrooloose/nerdtree&apos;</span><br><span class="line">Plugin &apos;majutsushi/tagbar&apos;</span><br><span class="line">Plugin &apos;bling/vim-airline&apos;</span><br><span class="line">Plugin &apos;mattn/emmet-vim&apos;</span><br><span class="line">Plugin &apos;easymotion/vim-easymotion&apos;</span><br><span class="line">Plugin &apos;tmhedberg/SimpylFold&apos;</span><br><span class="line">Plugin &apos;vim-scripts/indentpython.vim&apos;</span><br><span class="line">Plugin &apos;scrooloose/syntastic&apos;</span><br><span class="line">Plugin &apos;nvie/vim-flake8&apos;</span><br><span class="line">Plugin &apos;tomasr/molokai&apos;</span><br><span class="line">Plugin &apos;kien/ctrlp.vim&apos;</span><br><span class="line">Plugin &apos;Valloric/YouCompleteMe&apos;</span><br><span class="line"></span><br><span class="line">call vundle#end()</span><br><span class="line">filetype plugin indent on</span><br><span class="line"></span><br><span class="line">syntax enable</span><br><span class="line">syntax on</span><br><span class="line">colorscheme molokai</span><br><span class="line">let g:molokai_original = 1</span><br><span class="line"></span><br><span class="line">&quot; setting nerdtree</span><br><span class="line">&quot; ignore files in NERDTree</span><br><span class="line">let NERDTreeIgnore=[&apos;\.pyc$&apos;, &apos;\~$&apos;]</span><br><span class="line">map &lt;F2&gt; :NERDTreeToggle&lt;CR&gt;</span><br><span class="line">autocmd bufenter * if (winnr(&quot;$&quot;) == 1 &amp;&amp; exists(&quot;b:NERDTreeType&quot;) &amp;&amp; b:NERDTreeType == &quot;primary&quot;) | q | endif</span><br><span class="line"></span><br><span class="line">&quot; setting tagbar</span><br><span class="line">nmap &lt;F4&gt; : TagbarToggle&lt;CR&gt;</span><br><span class="line">let g:tagbar_width=30</span><br><span class="line"></span><br><span class="line">&quot; execute python</span><br><span class="line">&quot;map &lt;F5&gt; :w&lt;CR&gt;:!python %&lt;CR&gt;</span><br><span class="line"></span><br><span class="line">&quot; setting ariline</span><br><span class="line">let g:airline_powerline_fonts = 1</span><br><span class="line">let g:airline#extensions#tabline#enabled = 1</span><br><span class="line">let g:airline#extensions#tabline#left_sep = &apos; &apos;</span><br><span class="line">let g:airline#extensions#tabline#left_alt_sep = &apos;|&apos;</span><br><span class="line"></span><br><span class="line">&quot; emmet</span><br><span class="line">let g:user_emmet_expandabbr_key=&apos;&lt;c-e&gt;&apos;</span><br><span class="line">let g:user_emmet_settings=&#123;&apos;indentation&apos;:&apos;    &apos;&#125;</span><br><span class="line"></span><br><span class="line">&quot; easymotion</span><br><span class="line">map f &lt;Plug&gt;(easymotion-prefix)</span><br><span class="line">map ff &lt;Plug&gt;(easymotion-s)</span><br><span class="line">map fs &lt;Plug&gt;(easymotion-f)</span><br><span class="line">map fl &lt;Plug&gt;(easymotion-lineforward)</span><br><span class="line">map fj &lt;Plug&gt;(easymotion-j)</span><br><span class="line">map fk &lt;Plug&gt;(easymotion-k)</span><br><span class="line">map fh &lt;Plug&gt;(easymotion-linebackward)</span><br><span class="line">let g:EasyMotion_smartcase = 1</span><br><span class="line"></span><br><span class="line">&quot; simpylfold</span><br><span class="line">let g:SimpylFold_docstring_preview=1</span><br><span class="line"></span><br><span class="line">&quot; syntastic</span><br><span class="line">let python_highlight_all=1</span><br><span class="line"></span><br><span class="line">set nu</span><br><span class="line">set encoding=utf-8</span><br><span class="line">set fileencoding=utf-8</span><br><span class="line">set tabstop=4</span><br><span class="line">set expandtab</span><br><span class="line">set softtabstop=4</span><br><span class="line">set shiftwidth=4</span><br><span class="line">set autoindent</span><br><span class="line">set fileformat=unix</span><br><span class="line"></span><br><span class="line">&quot;split navigations</span><br><span class="line">nnoremap &lt;C-J&gt; &lt;C-W&gt;&lt;C-J&gt;</span><br><span class="line">nnoremap &lt;C-K&gt; &lt;C-W&gt;&lt;C-K&gt;</span><br><span class="line">nnoremap &lt;C-L&gt; &lt;C-W&gt;&lt;C-L&gt;</span><br><span class="line">nnoremap &lt;C-H&gt; &lt;C-W&gt;&lt;C-H&gt;</span><br><span class="line"></span><br><span class="line">&quot;enable folding</span><br><span class="line">set foldmethod=indent</span><br><span class="line">set foldlevel=99</span><br><span class="line"></span><br><span class="line">&quot;enable folding with the spacebar</span><br><span class="line">nnoremap &lt;space&gt; za</span><br></pre></td></tr></table></figure><p>然后输入<code>vim</code>命令进入命令行模式后， 输入安装命令. 这里的输入的命令是根据<code>.vimrc</code>中插件前缀设定的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PluginInstall</span><br></pre></td></tr></table></figure><h3 id="安装-zsh-和-oh-my-zsh"><a href="#安装-zsh-和-oh-my-zsh" class="headerlink" title="安装 zsh 和 oh-my-zsh"></a>安装 zsh 和 oh-my-zsh</h3><p>zsh 可以通过 yum 来安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install zsh</span><br></pre></td></tr></table></figure><p>使用 wget 下载安装脚本， 并执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh</span><br></pre></td></tr></table></figure><p>切换 zsh</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chsh -s /usr/bin/zsh</span><br></pre></td></tr></table></figure><p>可以编辑主目录下<code>.zshrc</code>文件来管理主题</p>]]></content>
      
      
        <tags>
            
            <tag> vim </tag>
            
            <tag> zsh </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>docker 安装与配置</title>
      <link href="/2018/07/16/docker-config/"/>
      <url>/2018/07/16/docker-config/</url>
      <content type="html"><![CDATA[<h3 id="安装-docker"><a href="#安装-docker" class="headerlink" title="安装 docker"></a>安装 docker</h3><p>使用官方的配置脚本， 在 centos 上安装 docker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL get.docker.com -o get-docker.sh</span><br><span class="line">sh get-docker.sh --mirror Aliyun</span><br></pre></td></tr></table></figure><h3 id="启动-docker"><a href="#启动-docker" class="headerlink" title="启动 docker"></a>启动 docker</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> docker</span><br><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure><h3 id="测试-docker"><a href="#测试-docker" class="headerlink" title="测试 docker"></a>测试 docker</h3><p>通过下载镜像来测试 docker 是否正常运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure><h3 id="加速-docker"><a href="#加速-docker" class="headerlink" title="加速 docker"></a>加速 docker</h3><p>因为网络原因国内下载 docker 镜像会非常缓慢， 可以通过配置阿里云镜像加速 docker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-<span class="string">'EOF'</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"registry-mirrors"</span>: [<span class="string">"https://xxxxx.mirror.aliyuncs.com"</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><p>可以通过<code>docker info</code>命令查看镜像源是否换成了国内的</p>]]></content>
      
      <categories>
          
          <category> 后端 </category>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>基于Token认证的公共Api接口设计</title>
      <link href="/2018/07/13/api-token/"/>
      <url>/2018/07/13/api-token/</url>
      <content type="html"><![CDATA[<p>公共 API 通过设计 token 和 sign 等方法，保证接口安全.</p><h3 id="基于-token"><a href="#基于-token" class="headerlink" title="基于 token"></a>基于 token</h3><p>客户端通过服务器设置的规则访问特定 url 获取 token</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">http://host/api/v1/token?app_id=xxx&amp;app_secret=xxx</span><br><span class="line"># 也可以通过post方法获取</span><br><span class="line">&#123;</span><br><span class="line">    &quot;app_id&quot;: xxx,</span><br><span class="line">    &quot;app_secret&quot;: xxx,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 服务端返回值</span><br><span class="line">&#123;</span><br><span class="line">    &quot;access_token&quot;: &quot;kkIs5V9uTri6&quot;,</span><br><span class="line">    &quot;expires_in&quot;: 7200</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后访问别的 API 接口可以通过参数上传 access_token 来保证访问</p><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://host/users/1?access_token=kkIs5V9uTri6</span><br></pre></td></tr></table></figure><h3 id="基于-sign-和-token-timestamp"><a href="#基于-sign-和-token-timestamp" class="headerlink" title="基于 sign 和 token, timestamp"></a>基于 sign 和 token, timestamp</h3><p>使用 sign 加密上传参数来保证数据的一致性, 而通过 timestamp 与服务器当前时间戳比较防止恶意调用接口.</p><h4 id="sign-签名算法"><a href="#sign-签名算法" class="headerlink" title="sign 签名算法"></a>sign 签名算法</h4><p>生成加密算法用于调用接口</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 按一定的顺序, 规则加密, 全部大写或全部小写</span></span><br><span class="line">text = <span class="string">"timestamp=xxx&amp;key=value&amp;token=xxxx"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里全部小写了, 这样就生成了签名</span></span><br><span class="line">sign = md5(text.lower())</span><br></pre></td></tr></table></figure><h4 id="调用接口"><a href="#调用接口" class="headerlink" title="调用接口"></a>调用接口</h4><p>加密后调用 api 接口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 调用更新用户信息的接口</span><br><span class="line">http://host/users/1/update</span><br><span class="line"></span><br><span class="line"># 上传数据</span><br><span class="line">&#123;</span><br><span class="line">    &quot;token&quot;: xxx,</span><br><span class="line">    &quot;timestamp&quot;: xxx,</span><br><span class="line">    &quot;sign&quot;: xxx,</span><br><span class="line">    # 以下是具体更新的数据</span><br><span class="line">    &quot;name&quot; xxx,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="服务器鉴定"><a href="#服务器鉴定" class="headerlink" title="服务器鉴定"></a>服务器鉴定</h4><p>获取客户端的请求数据, 服务器开始鉴定</p><ol><li>判断是否包含参数 token, timestamp, sign</li><li>判断参数中的时间戳的服务器的时间戳间隔(超过 10 分钟失效, 这个时间用户自己设置)</li><li>判断 token 是否过期</li><li>服务器通过相同的签名算法加密后与客户端 sign 作比较</li></ol><p>经过一下判断来确定当前请求是否有效, 如果全部通过就可以返回数据了</p>]]></content>
      
      
        <tags>
            
            <tag> api </tag>
            
            <tag> token </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>基于docker的mysql主从配置</title>
      <link href="/2018/07/13/mysql-master/"/>
      <url>/2018/07/13/mysql-master/</url>
      <content type="html"><![CDATA[<h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><p>备份数据, 主库挂了从库依然可以访问</p><h3 id="使用-docker-生成镜像"><a href="#使用-docker-生成镜像" class="headerlink" title="使用 docker 生成镜像"></a>使用 docker 生成镜像</h3><p>本文默认为已安装 docker 环境, ubuntu 环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">在本机上安装mysql5.7版本</span><br><span class="line">sudo docker pull mysql:5.7</span><br><span class="line"></span><br><span class="line"><span class="comment"># code 在code目录下创建mysql/master和mysql/slave目录</span></span><br><span class="line">mkdir -p mysql/&#123;master,slave&#125;</span><br></pre></td></tr></table></figure><p>然后在 master 和 slave 目录中写入配置文件<code>Dockerfile</code>和<code>my.cnf</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># master/Dockerfile和slave/Dockerfile</span><br><span class="line">FROM mysql:5.7</span><br><span class="line">COPY my.cnf /etc/mysql/</span><br><span class="line">EXPOSE 3306</span><br><span class="line">CMD [&quot;mysqld&quot;]</span><br><span class="line"></span><br><span class="line"># master/my.cnf， 主库和从库的server-id不能相同</span><br><span class="line">[mysqld]</span><br><span class="line">log-bin=mysql-bin</span><br><span class="line">server-id=1</span><br><span class="line"></span><br><span class="line"># slave/my.cnf</span><br><span class="line">log-bin=mysql-bin</span><br><span class="line">server-id=2</span><br></pre></td></tr></table></figure><p>分别在目录中执行以下命令生成镜像</p><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># master, . 表示当前目录</span></span><br><span class="line">sudo docker build -t master/mysql .</span><br><span class="line"></span><br><span class="line"><span class="comment"># slave</span></span><br><span class="line">sudo docker build -t slave/mysql .</span><br></pre></td></tr></table></figure><h3 id="创建并配置容器"><a href="#创建并配置容器" class="headerlink" title="创建并配置容器"></a>创建并配置容器</h3><p>创建容器初始化数据库密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run -p 3307:3306 --name mysql-master -e MYSQL_ROOT_PASSWORD=654321 -d master/mysql</span><br><span class="line">sudo docker run -p 3308:3306 --name mysql-slave -e MYSQL_ROOT_PASSWORD=654321 -d slave/mysql</span><br></pre></td></tr></table></figure><p>可以通过<code>sudo docker ps 查询</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                     NAMES</span><br><span class="line">b69cb0f6d536        slave/mysql         &quot;docker-entrypoint.s…&quot;   2 hours ago         Up 2 hours          0.0.0.0:3308-&gt;3306/tcp   mysql-slave</span><br><span class="line">310f9101ef10        master/mysql        &quot;docker-entrypoint.s…&quot;   2 hours ago         Up 2 hours          0.0.0.0:3307-&gt;3306/tcp   mysql-master</span><br></pre></td></tr></table></figure><p>写一个查询容器<code>IP地址</code>的 sh, 把内容复制到.bashrc 中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function docker_ip()&#123;</span><br><span class="line">  sudo docker inspect --format &apos;&#123;&#123; .NetworkSettings.IPAddress &#125;&#125;&apos; $1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看两个容器服务的<code>IP地址</code>, 连接数据库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询地址</span></span><br><span class="line">docker_ip mysql-master  <span class="comment"># 172.17.0.2</span></span><br><span class="line">docker_ip mysql-slave   <span class="comment"># 172.17.0.3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接数据库</span></span><br><span class="line">mysql -u root -h 172.17.0.2 -p</span><br><span class="line">mysql -u root -h 172.17.0.3 -p</span><br></pre></td></tr></table></figure><p>在主库上进行配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 设置user用户并设置所有host可以访问, 访问密码654321</span><br><span class="line">GRANT SELECT, REPLICATION SLAVE ON *.* to &apos;user&apos;@&apos;%&apos; identified by &apos;654321&apos;;</span><br><span class="line"></span><br><span class="line"># 查看容器状态</span><br><span class="line">show master status</span><br><span class="line"></span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">| mysql-bin.000003 |     1028 |              |                  |                   |</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br></pre></td></tr></table></figure><p>在从库上进行配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">change master to</span><br><span class="line">master_host=&apos;172.17.0.2&apos;, # 连接的master IP地址</span><br><span class="line">master_user=&apos;user&apos;,</span><br><span class="line">master_log_file=&apos;mysql-bin.000003&apos;,</span><br><span class="line">master_log_pos=1028,</span><br><span class="line">master_port=3306,</span><br><span class="line">master_password=&apos;654321&apos;;</span><br><span class="line"></span><br><span class="line"># 执行命令并查看连接状态</span><br><span class="line">mysql &gt; start slave;</span><br><span class="line">mysql &gt; show slave status\G;</span><br><span class="line"></span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State: Waiting for master to send event</span><br><span class="line">                  Master_Host: 172.17.0.2</span><br><span class="line">                  Master_User: user</span><br><span class="line">                  Master_Port: 3306</span><br><span class="line">                Connect_Retry: 60</span><br><span class="line">              Master_Log_File: mysql-bin.000003</span><br><span class="line">          Read_Master_Log_Pos: 1028</span><br><span class="line">               Relay_Log_File: b69cb0f6d536-relay-bin.000002</span><br><span class="line">                Relay_Log_Pos: 503</span><br><span class="line">        Relay_Master_Log_File: mysql-bin.000003</span><br><span class="line">             Slave_IO_Running: Yes</span><br><span class="line">            Slave_SQL_Running: Yes</span><br><span class="line">              Replicate_Do_DB:</span><br><span class="line">          Replicate_Ignore_DB:</span><br><span class="line">           Replicate_Do_Table:</span><br><span class="line">       Replicate_Ignore_Table:</span><br><span class="line">      Replicate_Wild_Do_Table:</span><br><span class="line">  Replicate_Wild_Ignore_Table:</span><br><span class="line">                   Last_Errno: 0</span><br><span class="line">                   Last_Error:</span><br><span class="line">                 Skip_Counter: 0</span><br><span class="line">          Exec_Master_Log_Pos: 1028</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"># 如果配置错误执行stop slave后重新配置</span><br><span class="line">mysql &gt; stop slave;</span><br><span class="line">mysql &gt; 配置...</span><br><span class="line">mysql &gt; start slave;</span><br></pre></td></tr></table></figure><p><code>Slave_IO_Running</code>和<code>Slave_SQL_Running</code>必须是 Yes, 如果是 No 和 Connecting 表示连接失败</p><p>失败原因可能有:</p><ol><li>连接 master 的 IP 地址有误</li><li>配置密码错误</li><li>mysql_log_pos 有误</li></ol><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>在主库创建一个数据库, 在从库上查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 主库</span><br><span class="line">create database abc default character set utf8;</span><br><span class="line"></span><br><span class="line"># 从库</span><br><span class="line">mysql&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| abc                |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| sys                |</span><br><span class="line">+--------------------+</span><br></pre></td></tr></table></figure><h3 id="参考地址"><a href="#参考地址" class="headerlink" title="参考地址"></a>参考地址</h3><ul><li><a href="https://laravel-china.org/articles/6631/using-docker-to-complete-master-slave-configuration-of-mysql-database" target="_blank" rel="noopener">https://laravel-china.org/articles/6631/using-docker-to-complete-master-slave-configuration-of-mysql-database</a></li><li><a href="https://www.jianshu.com/p/0439206e1f28" target="_blank" rel="noopener">https://www.jianshu.com/p/0439206e1f28</a></li></ul>]]></content>
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
